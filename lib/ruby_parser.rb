#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "ruby_parser.y".
#

require 'racc/parser'


class RubyParser < Racc::Parser

module_eval <<'..end ruby_parser.y modeval..idbbc8b8d621', 'ruby_parser.y', 1788

require "ruby_lexer"
require "ruby_parser_extras"

# Local Variables: **
# racc-token-length-max:14 **
# End: **
..end ruby_parser.y modeval..idbbc8b8d621

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 0, 136, :_reduce_1,
 2, 133, :_reduce_2,
 4, 135, :_reduce_3,
 2, 134, :_reduce_4,
 1, 140, :_reduce_none,
 1, 140, :_reduce_none,
 3, 140, :_reduce_7,
 2, 140, :_reduce_8,
 0, 158, :_reduce_9,
 4, 143, :_reduce_10,
 3, 143, :_reduce_11,
 3, 143, :_reduce_12,
 3, 143, :_reduce_13,
 2, 143, :_reduce_14,
 3, 143, :_reduce_15,
 3, 143, :_reduce_16,
 3, 143, :_reduce_17,
 3, 143, :_reduce_18,
 3, 143, :_reduce_19,
 0, 159, :_reduce_20,
 5, 143, :_reduce_21,
 4, 143, :_reduce_22,
 3, 143, :_reduce_23,
 3, 143, :_reduce_24,
 3, 143, :_reduce_25,
 6, 143, :_reduce_26,
 5, 143, :_reduce_27,
 5, 143, :_reduce_28,
 5, 143, :_reduce_29,
 3, 143, :_reduce_30,
 3, 143, :_reduce_31,
 3, 143, :_reduce_32,
 3, 143, :_reduce_33,
 1, 143, :_reduce_none,
 1, 157, :_reduce_none,
 3, 157, :_reduce_36,
 3, 157, :_reduce_37,
 2, 157, :_reduce_38,
 2, 157, :_reduce_39,
 1, 157, :_reduce_none,
 1, 147, :_reduce_41,
 1, 149, :_reduce_none,
 1, 149, :_reduce_none,
 2, 149, :_reduce_44,
 2, 149, :_reduce_45,
 2, 149, :_reduce_46,
 1, 162, :_reduce_none,
 4, 162, :_reduce_48,
 4, 162, :_reduce_49,
 0, 169, :_reduce_50,
 0, 170, :_reduce_51,
 6, 167, :_reduce_52,
 2, 161, :_reduce_53,
 3, 161, :_reduce_54,
 4, 161, :_reduce_55,
 5, 161, :_reduce_56,
 4, 161, :_reduce_57,
 5, 161, :_reduce_58,
 2, 161, :_reduce_59,
 2, 161, :_reduce_60,
 1, 150, :_reduce_none,
 3, 150, :_reduce_62,
 1, 173, :_reduce_none,
 3, 173, :_reduce_64,
 1, 172, :_reduce_65,
 2, 172, :_reduce_66,
 3, 172, :_reduce_67,
 2, 172, :_reduce_68,
 2, 172, :_reduce_69,
 1, 172, :_reduce_70,
 1, 175, :_reduce_none,
 3, 175, :_reduce_72,
 2, 174, :_reduce_73,
 3, 174, :_reduce_74,
 1, 176, :_reduce_75,
 4, 176, :_reduce_76,
 3, 176, :_reduce_77,
 3, 176, :_reduce_78,
 3, 176, :_reduce_79,
 3, 176, :_reduce_80,
 2, 176, :_reduce_81,
 1, 176, :_reduce_82,
 1, 148, :_reduce_83,
 4, 148, :_reduce_84,
 3, 148, :_reduce_85,
 3, 148, :_reduce_86,
 3, 148, :_reduce_87,
 3, 148, :_reduce_88,
 2, 148, :_reduce_89,
 1, 148, :_reduce_90,
 1, 178, :_reduce_91,
 1, 178, :_reduce_none,
 2, 179, :_reduce_93,
 1, 179, :_reduce_94,
 3, 179, :_reduce_95,
 1, 180, :_reduce_none,
 1, 180, :_reduce_none,
 1, 180, :_reduce_none,
 1, 180, :_reduce_99,
 1, 180, :_reduce_100,
 1, 145, :_reduce_101,
 1, 145, :_reduce_102,
 1, 146, :_reduce_103,
 0, 184, :_reduce_104,
 4, 146, :_reduce_105,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 181, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 1, 182, :_reduce_none,
 3, 160, :_reduce_173,
 5, 160, :_reduce_174,
 3, 160, :_reduce_175,
 6, 160, :_reduce_176,
 5, 160, :_reduce_177,
 5, 160, :_reduce_178,
 5, 160, :_reduce_179,
 5, 160, :_reduce_180,
 4, 160, :_reduce_181,
 3, 160, :_reduce_182,
 3, 160, :_reduce_183,
 3, 160, :_reduce_184,
 3, 160, :_reduce_185,
 3, 160, :_reduce_186,
 3, 160, :_reduce_187,
 3, 160, :_reduce_188,
 3, 160, :_reduce_189,
 3, 160, :_reduce_190,
 4, 160, :_reduce_191,
 4, 160, :_reduce_192,
 2, 160, :_reduce_193,
 2, 160, :_reduce_194,
 3, 160, :_reduce_195,
 3, 160, :_reduce_196,
 3, 160, :_reduce_197,
 3, 160, :_reduce_198,
 3, 160, :_reduce_199,
 3, 160, :_reduce_200,
 3, 160, :_reduce_201,
 3, 160, :_reduce_202,
 3, 160, :_reduce_203,
 3, 160, :_reduce_204,
 3, 160, :_reduce_205,
 3, 160, :_reduce_206,
 3, 160, :_reduce_207,
 2, 160, :_reduce_208,
 2, 160, :_reduce_209,
 3, 160, :_reduce_210,
 3, 160, :_reduce_211,
 3, 160, :_reduce_212,
 3, 160, :_reduce_213,
 3, 160, :_reduce_214,
 5, 160, :_reduce_215,
 1, 160, :_reduce_none,
 1, 156, :_reduce_217,
 1, 153, :_reduce_none,
 2, 153, :_reduce_219,
 2, 153, :_reduce_220,
 5, 153, :_reduce_221,
 2, 153, :_reduce_222,
 3, 153, :_reduce_223,
 3, 190, :_reduce_224,
 4, 190, :_reduce_225,
 4, 190, :_reduce_226,
 6, 190, :_reduce_227,
 1, 191, :_reduce_none,
 1, 191, :_reduce_none,
 1, 163, :_reduce_230,
 2, 163, :_reduce_231,
 5, 163, :_reduce_232,
 2, 163, :_reduce_233,
 5, 163, :_reduce_234,
 4, 163, :_reduce_235,
 7, 163, :_reduce_236,
 3, 163, :_reduce_237,
 1, 163, :_reduce_none,
 4, 194, :_reduce_239,
 3, 194, :_reduce_240,
 5, 194, :_reduce_241,
 7, 194, :_reduce_242,
 2, 194, :_reduce_243,
 5, 194, :_reduce_244,
 4, 194, :_reduce_245,
 6, 194, :_reduce_246,
 7, 194, :_reduce_247,
 9, 194, :_reduce_248,
 3, 194, :_reduce_249,
 1, 194, :_reduce_none,
 0, 196, :_reduce_251,
 2, 166, :_reduce_252,
 1, 195, :_reduce_none,
 0, 197, :_reduce_254,
 3, 195, :_reduce_255,
 0, 198, :_reduce_256,
 4, 195, :_reduce_257,
 2, 193, :_reduce_258,
 2, 192, :_reduce_259,
 1, 192, :_reduce_none,
 1, 187, :_reduce_261,
 3, 187, :_reduce_262,
 3, 155, :_reduce_263,
 4, 155, :_reduce_264,
 2, 155, :_reduce_265,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_none,
 1, 186, :_reduce_274,
 0, 220, :_reduce_275,
 4, 186, :_reduce_276,
 0, 221, :_reduce_277,
 5, 186, :_reduce_278,
 3, 186, :_reduce_279,
 3, 186, :_reduce_280,
 2, 186, :_reduce_281,
 4, 186, :_reduce_282,
 3, 186, :_reduce_283,
 3, 186, :_reduce_284,
 1, 186, :_reduce_285,
 4, 186, :_reduce_286,
 3, 186, :_reduce_287,
 1, 186, :_reduce_288,
 5, 186, :_reduce_289,
 2, 186, :_reduce_290,
 1, 186, :_reduce_none,
 2, 186, :_reduce_292,
 6, 186, :_reduce_293,
 6, 186, :_reduce_294,
 0, 222, :_reduce_295,
 0, 223, :_reduce_296,
 7, 186, :_reduce_297,
 0, 224, :_reduce_298,
 0, 225, :_reduce_299,
 7, 186, :_reduce_300,
 5, 186, :_reduce_301,
 4, 186, :_reduce_302,
 5, 186, :_reduce_303,
 0, 226, :_reduce_304,
 0, 227, :_reduce_305,
 9, 186, :_reduce_306,
 0, 228, :_reduce_307,
 0, 229, :_reduce_308,
 7, 186, :_reduce_309,
 0, 230, :_reduce_310,
 0, 231, :_reduce_311,
 0, 232, :_reduce_312,
 9, 186, :_reduce_313,
 0, 233, :_reduce_314,
 0, 234, :_reduce_315,
 6, 186, :_reduce_316,
 0, 235, :_reduce_317,
 6, 186, :_reduce_318,
 0, 236, :_reduce_319,
 0, 237, :_reduce_320,
 9, 186, :_reduce_321,
 1, 186, :_reduce_322,
 1, 186, :_reduce_323,
 1, 186, :_reduce_324,
 1, 186, :_reduce_325,
 1, 152, :_reduce_326,
 1, 210, :_reduce_none,
 1, 210, :_reduce_none,
 1, 210, :_reduce_none,
 2, 210, :_reduce_none,
 1, 212, :_reduce_none,
 1, 212, :_reduce_none,
 1, 212, :_reduce_none,
 1, 211, :_reduce_none,
 5, 211, :_reduce_335,
 1, 138, :_reduce_none,
 2, 138, :_reduce_337,
 1, 214, :_reduce_none,
 1, 214, :_reduce_339,
 1, 168, :_reduce_none,
 2, 168, :_reduce_341,
 1, 168, :_reduce_342,
 3, 168, :_reduce_343,
 0, 239, :_reduce_344,
 0, 240, :_reduce_345,
 6, 238, :_reduce_346,
 2, 164, :_reduce_347,
 4, 164, :_reduce_348,
 4, 164, :_reduce_349,
 0, 242, :_reduce_350,
 3, 209, :_reduce_351,
 4, 209, :_reduce_352,
 4, 209, :_reduce_353,
 3, 209, :_reduce_354,
 2, 209, :_reduce_355,
 1, 209, :_reduce_356,
 0, 243, :_reduce_357,
 0, 244, :_reduce_358,
 6, 208, :_reduce_359,
 0, 245, :_reduce_360,
 0, 246, :_reduce_361,
 6, 208, :_reduce_362,
 0, 249, :_reduce_363,
 6, 213, :_reduce_364,
 1, 247, :_reduce_none,
 4, 247, :_reduce_366,
 2, 247, :_reduce_367,
 1, 248, :_reduce_none,
 1, 248, :_reduce_none,
 6, 137, :_reduce_370,
 0, 137, :_reduce_371,
 1, 250, :_reduce_372,
 1, 250, :_reduce_none,
 1, 250, :_reduce_none,
 2, 251, :_reduce_375,
 1, 251, :_reduce_none,
 2, 139, :_reduce_377,
 1, 139, :_reduce_none,
 1, 200, :_reduce_379,
 1, 200, :_reduce_380,
 1, 200, :_reduce_none,
 1, 201, :_reduce_382,
 1, 254, :_reduce_none,
 2, 254, :_reduce_384,
 3, 255, :_reduce_385,
 1, 255, :_reduce_386,
 3, 202, :_reduce_387,
 3, 203, :_reduce_388,
 3, 204, :_reduce_389,
 3, 204, :_reduce_390,
 1, 258, :_reduce_391,
 3, 258, :_reduce_392,
 1, 259, :_reduce_none,
 2, 259, :_reduce_394,
 3, 205, :_reduce_395,
 3, 205, :_reduce_396,
 1, 261, :_reduce_397,
 3, 261, :_reduce_398,
 1, 256, :_reduce_399,
 2, 256, :_reduce_400,
 1, 257, :_reduce_401,
 2, 257, :_reduce_402,
 1, 260, :_reduce_403,
 0, 263, :_reduce_404,
 3, 260, :_reduce_405,
 0, 264, :_reduce_406,
 4, 260, :_reduce_407,
 1, 262, :_reduce_408,
 1, 262, :_reduce_409,
 1, 262, :_reduce_410,
 1, 262, :_reduce_none,
 2, 183, :_reduce_412,
 1, 183, :_reduce_413,
 1, 265, :_reduce_none,
 1, 265, :_reduce_none,
 1, 265, :_reduce_none,
 1, 265, :_reduce_none,
 3, 253, :_reduce_418,
 1, 252, :_reduce_none,
 1, 252, :_reduce_none,
 2, 252, :_reduce_421,
 2, 252, :_reduce_422,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_none,
 1, 177, :_reduce_428,
 1, 177, :_reduce_429,
 1, 177, :_reduce_430,
 1, 177, :_reduce_431,
 1, 177, :_reduce_432,
 1, 177, :_reduce_433,
 1, 206, :_reduce_434,
 1, 151, :_reduce_435,
 1, 154, :_reduce_436,
 1, 154, :_reduce_437,
 1, 215, :_reduce_438,
 0, 266, :_reduce_439,
 4, 215, :_reduce_440,
 2, 215, :_reduce_441,
 4, 217, :_reduce_442,
 2, 217, :_reduce_443,
 6, 267, :_reduce_444,
 4, 267, :_reduce_445,
 4, 267, :_reduce_446,
 2, 267, :_reduce_447,
 4, 267, :_reduce_448,
 2, 267, :_reduce_449,
 2, 267, :_reduce_450,
 1, 267, :_reduce_451,
 0, 267, :_reduce_452,
 1, 273, :_reduce_453,
 1, 273, :_reduce_454,
 1, 273, :_reduce_455,
 1, 273, :_reduce_456,
 1, 268, :_reduce_457,
 3, 268, :_reduce_458,
 3, 274, :_reduce_459,
 1, 269, :_reduce_460,
 3, 269, :_reduce_461,
 1, 275, :_reduce_none,
 1, 275, :_reduce_none,
 2, 270, :_reduce_464,
 1, 270, :_reduce_465,
 1, 276, :_reduce_none,
 1, 276, :_reduce_none,
 2, 272, :_reduce_468,
 2, 271, :_reduce_469,
 0, 271, :_reduce_470,
 1, 218, :_reduce_none,
 0, 277, :_reduce_472,
 5, 218, :_reduce_473,
 1, 207, :_reduce_474,
 2, 207, :_reduce_475,
 2, 207, :_reduce_476,
 1, 189, :_reduce_none,
 3, 189, :_reduce_478,
 3, 278, :_reduce_479,
 1, 171, :_reduce_none,
 1, 171, :_reduce_none,
 1, 171, :_reduce_none,
 1, 165, :_reduce_none,
 1, 165, :_reduce_none,
 1, 165, :_reduce_none,
 1, 165, :_reduce_none,
 1, 241, :_reduce_none,
 1, 241, :_reduce_none,
 1, 241, :_reduce_none,
 1, 219, :_reduce_none,
 1, 219, :_reduce_none,
 0, 141, :_reduce_none,
 1, 141, :_reduce_none,
 0, 185, :_reduce_none,
 1, 185, :_reduce_none,
 0, 188, :_reduce_none,
 1, 188, :_reduce_none,
 1, 188, :_reduce_none,
 1, 216, :_reduce_499,
 1, 216, :_reduce_none,
 1, 144, :_reduce_none,
 2, 144, :_reduce_502,
 0, 142, :_reduce_503,
 0, 199, :_reduce_504 ]

racc_reduce_n = 505

racc_shift_n = 908

clist = [
'-274,484,261,262,122,-89,792,-274,-274,-274,-435,552,-274,-274,-274',
'602,-274,-84,357,399,-64,358,410,3,269,89,-274,-274,484,271,565,-88',
'484,34,742,-274,-274,122,-274,-274,-274,-274,-274,-87,269,-86,600,454',
'752,271,601,-84,-77,677,484,-83,-85,-72,-86,704,261,262,-85,566,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,359',
'361,-274,-274,-274,677,411,-274,-89,123,-274,266,299,-274,-89,-274,-484',
'-274,484,-274,-84,-274,-274,-274,-274,-274,-274,-274,-81,-274,-483,-274',
'440,269,-88,486,438,439,271,603,-76,565,123,-280,-274,-274,-274,-274',
'-86,-274,-280,-280,-280,-274,-80,-483,-280,-280,269,-280,269,677,486',
'271,269,271,486,299,-78,271,-79,269,-83,675,566,-87,271,-87,-280,-280',
'-87,-280,-280,-280,-280,-280,269,736,486,565,-86,271,-86,565,-85,-86',
'-85,269,-90,-85,-85,269,271,675,398,-87,271,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,758,566,-280,-280,-280',
'566,547,269,-429,486,-280,-273,271,-79,122,-429,734,-280,-273,-280,-487',
'-280,-280,-280,-280,-280,-280,-280,-90,-280,-79,-280,-83,357,511,395',
'269,513,675,357,511,271,394,516,-280,-280,357,-80,-487,-280,-79,-88',
'-75,-280,-79,-487,-487,-487,-90,711,-85,-487,-487,-77,-487,-87,710,-273',
'-432,511,-487,733,529,-487,299,-432,-350,-487,-82,357,-77,761,-483,-487',
'-487,-79,-487,-487,-487,-487,-487,396,155,359,361,263,264,123,357,359',
'361,527,576,-487,-87,295,359,361,392,277,280,-85,-487,-487,-487,-487',
'-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-487,-77,-487,-487',
'-487,-434,546,-82,731,-281,-487,-90,-434,359,361,538,-281,-487,-77,-487',
'742,-487,-487,-487,-487,-487,-487,-487,-423,-487,-487,-487,359,361,533',
'-423,375,511,-77,-326,516,878,-77,374,-487,-487,-326,-78,877,-487,-433',
'-86,-428,-487,-483,-483,-483,-433,-483,-428,765,-434,-483,-483,742,-281',
'525,-483,729,-483,-483,-483,-483,-483,-483,-483,807,523,728,525,-483',
'-483,-483,-483,-483,-483,-483,-281,269,378,379,-430,376,271,-281,-326',
'-483,879,-430,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,725',
'-483,-483,656,-483,-483,-483,695,770,433,655,399,620,622,623,627,432',
'597,-481,774,-480,-487,777,269,641,751,-483,709,271,-483,-483,-280,-483',
'-483,-281,-483,131,-483,-280,-483,423,-483,714,-484,425,261,262,422',
'-76,-483,266,424,-84,-503,-483,-483,-483,-483,-483,-483,-503,-503,-503',
'-483,-483,-503,-503,-503,-426,-503,-423,-487,-86,598,-273,-426,399,-423',
'-487,-503,-481,-273,-480,-483,755,742,807,-280,-503,-503,-280,-503,-503',
'-503,-503,-503,396,-280,597,-280,426,-481,-484,-480,-487,596,-280,102',
'-282,-282,-326,-484,-281,-434,101,-282,-282,-326,-431,-281,-434,712',
'299,707,-426,-431,-423,-487,-503,656,-273,620,622,623,627,-503,655,326',
'-426,705,321,-503,696,269,325,-426,-280,618,271,783,624,629,631,295',
'598,-280,321,277,280,283,286,785,-503,103,-282,-282,-326,321,-281,-434',
'-484,-484,-484,589,-484,-503,266,-503,-484,-484,-503,261,262,-484,384',
'-484,-484,-484,-484,-484,-484,-484,620,622,623,627,-484,-484,-484,-484',
'-484,-484,-484,454,-435,553,299,314,315,316,317,318,-484,755,742,-484',
'-484,-484,-484,-484,-484,-484,-484,-484,-484,384,-484,-484,-261,-484',
'-484,-484,299,261,262,682,683,295,685,88,92,277,280,525,-81,-75,-79',
'672,-89,-83,-87,-484,547,589,-484,-484,669,-484,-484,589,-484,266,-484',
'295,-484,658,-484,277,280,283,286,623,627,266,-484,797,303,653,-503',
'-484,-484,-484,-484,-484,-484,-503,-503,-503,-484,-484,-503,-503,-503',
'652,-503,800,651,-88,314,315,316,317,318,-72,-503,314,315,316,317,318',
'650,647,810,-503,-503,266,-503,-503,-503,-503,-503,812,299,815,817,578',
'365,-261,-483,579,-484,299,299,299,822,321,321,184,190,303,200,204,214',
'219,642,227,230,824,640,239,639,-262,611,-503,177,181,186,192,594,828',
'-503,589,450,554,321,321,-503,530,834,835,243,170,836,175,179,188,194',
'198,202,206,212,216,453,225,839,266,237,-503,509,489,488,845,-63,847',
'736,18,22,26,31,37,-503,733,-503,53,63,-503,736,851,82,455,91,95,6,11',
'17,23,27,445,444,859,441,51,56,60,64,69,73,77,861,299,97,428,864,865',
'427,867,29,39,44,47,48,52,59,67,70,74,78,83,88,92,409,9,15,589,25,30',
'36,407,589,405,403,401,400,399,393,384,880,321,321,313,381,887,266,889',
'377,892,43,893,736,54,353,350,72,76,334,87,303,96,639,302,589,20,618',
'274,589,624,629,631,266,61,166,153,149,905,84,89,93,4,10,16,128,98,589',
'34,40,18,22,26,,37,453,,,53,63,,,,82,,91,95,6,11,17,23,27,620,622,623',
'627,51,56,60,64,69,73,77,,,97,,,,,668,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,,284,287,,136,,,139,,,72,76,,87,,,295,,298,20,277,280,283,286,289',
'291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,269,281,,-217,,271,14,18',
'22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277',
'280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31',
'37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97',
',,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505',
'-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87',
',96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,292,294,296,,-505',
'-505,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
'289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,',
',53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,',
',29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505',
'-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87',
',96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,292,294,296,,-505',
'-505,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
'289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,',
',53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,',
',29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,',
',,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
',,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,,,,',
',,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,293',
'61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,300,276,279,282,285',
'288,,,294,296,,,,,,284,287,,43,,,311,,,72,76,,87,,96,295,,298,20,277',
'280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22',
'26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
'299,-505,-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,',
'72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,',
',72,76,,87,,96,295,,298,20,277,280,283,286,,,293,61,297,,,,84,89,93',
'4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,,294,296',
',,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289',
'291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505',
'-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96',
'295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,',
',,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,299,-505,-505,-505,-505,285,288,,,-505,-505,,,,,,284',
'287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293',
'61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505',
'285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20',
'277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18',
'22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,,20,277',
'280,283,286,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,',
',53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,',
',29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,',
',,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
',,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,,,,,,,,284',
'287,,43,,,311,,,72,76,,87,,96,295,,298,20,277,280,283,286,,,,61,,,,',
'84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6',
'11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,',
',,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,',
',,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34',
'40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,311,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,',
',,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,',
',,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,',
'82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-251,-251,-251,,-251,,,,-251',
'-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251',
'-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,',
'-251,321,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76',
',87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,',
',,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,',
',,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,-481,-481,-481,,-481,,,,-481,-481,,,,-481,,-481,-481,-481,-481',
'-481,-481,-481,,-481,,,-481,-481,-481,-481,-481,-481,-481,,,,,,,,,,-481',
',,-481,-481,-481,-481,-481,-481,-481,-481,-481,-481,,-481,-481,,-481',
'-481,-481,,,,,,,,,,,,,,,,,,,,-481,,,-481,-481,,-481,-481,,-481,,-481',
',-481,,-481,,,,,,,,-481,,-481,,,-481,-481,-481,-481,-481,-481,,,,-481',
'-481,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64',
'69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-480,-480,-480,,-480',
',,,-480,-480,,,,-480,,-480,-480,-480,-480,-480,-480,-480,,-480,,,-480',
'-480,-480,-480,-480,-480,-480,,,,,,,,,,-480,,,-480,-480,-480,-480,-480',
'-480,-480,-480,-480,-480,,-480,-480,,-480,-480,-480,,,,,,,,,,,,,,,,',
',,,-480,,,-480,-480,,-480,-480,,-480,,-480,,-480,,-480,,,,,,,,-480,',
'-480,,,-480,-480,-480,-480,-480,-480,,,,-480,-480,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',112,,,48,52,59,67,70,74,78,83,88,92,618,9,15,624,629,631,110,,,,,,',
',,,,,,,,,,,,,449,,,139,,,72,76,,87,,,632,,,,,,,620,622,623,627,,,,,',
'84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,522,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83',
'88,92,618,9,15,624,629,631,110,,,,,,,,,,,,,,,,,,,,162,,,139,,,72,76',
',87,,,632,,,,,,,620,622,623,627,,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,',
',,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,113,,,54,,,72,76,,87,,96,,,,,,,,',
',,,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176,180,185',
'191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193',
'197,,,211,215,221,249,252,254,256,241,242,244,168,171,173,178,183,189',
'199,203,207,246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,,,237,257,,,18,22,26,,37,,,40,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76',
',87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,769,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'-251,-251,-251,,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251',
'-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251',
'-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251',
',,,,,,,,,,,,,,,,,,,-251,,,-251,313,,-251,-251,,-251,,-251,,-251,,-251',
',,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251,,,,-251,-251,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,389,76,,87,,146,,131,,20,,',
',,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,',
'91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,773,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56',
'60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,',
'141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76',
',87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',903,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,593,,131,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,871,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,868',
',131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,112,,,48,52,418,67,70,74,419,83,88,92,,9,15',
',,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,587,,131,,20,,,,,,,,141,,,,',
'84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,',
',,,,,,,,,,,,,,,113,,,54,,,72,76,,87,,96,,,,,,,,,,,701,,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,863,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,587,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110',
',,,,,,,,,,,,,,,,,,,162,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,418,67,70,74,419,83',
'88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,',
',,,,,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,31,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,',
',,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,574,,131,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',666,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,788,,131,,20,,,,,,,,141,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,',
'51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9',
'15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76',
',87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,',
',53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,',
',,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,',
',,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,',
',,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,',
'51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,',
'9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,794,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,',
',,,,,,,,,,,,,,,856,,,139,,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10',
'16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,',
'169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244',
'168,171,173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,,,184',
'190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,',
'243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18,22',
'26,,37,,,40,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,',
',,,,,,,,,,,,,,,449,,,139,450,,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,791,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176',
'180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182',
'187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173,178',
'183,189,199,203,207,246,247,248,226,253,,255,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,257,,,18,22,26,,37,,,40,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115',
'116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,-251,-251,-251,,-251,,,,-251,-251,,,,-251',
',-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251',
'-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251',
',-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251',
'-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251',
'-251,,,,-251,-251,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,',
',,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,-485,-485,-485,,-485,,,,-485,-485',
',,,-485,,-485,-485,-485,-485,-485,-485,-485,,,,,-485,-485,-485,-485',
'-485,-485,-485,,,,,,,,,,-485,,,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,,-485,-485,,-485,-485,-485,,,,,,,,,,,,,,,,,,,,-485,,,-485',
'-485,,-485,-485,,-485,,-485,,-485,,-485,,,,,,,,-485,,,,,-485,-485,-485',
'-485,-485,-485,,,,-485,-485,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,492,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172,174',
'182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171,173',
'178,183,189,199,203,207,246,247,248,226,,,255,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,257,,,-486,-486,-486,,-486',
',,40,-486,-486,,,,-486,,-486,-486,-486,-486,-486,-486,-486,,,,,-486',
'-486,-486,-486,-486,-486,-486,,,,,,,,,,-486,,,-486,-486,-486,-486,-486',
'-486,-486,-486,-486,-486,,-486,-486,,-486,-486,-486,,,,,,,,,,,,,,,,',
',,,-486,,,-486,-486,,-486,-486,,-486,,-486,,-486,,-486,,,,,,,,-486,',
',,,-486,-486,-486,-486,-486,-486,,,,-486,-486,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,',
',,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,',
',,,,,,,,136,,,139,,,72,76,,87,,522,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,',
'34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,522,,,,20,,,,,,,,141,,',
',,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,',
',162,,,163,,,72,76,,87,,164,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235',
'240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241',
'242,244,168,171,173,178,183,189,199,203,207,246,247,248,226,340,341',
'255,342,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,',
'237,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172',
'174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171',
'173,178,183,189,199,203,207,246,247,248,226,340,341,255,342,,,,,,,184',
'190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,',
'243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,176,180,185',
'191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193',
'197,,,211,215,221,249,252,254,256,241,242,244,168,171,173,178,183,189',
'199,203,207,246,247,248,226,,,255,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,,,237,176,180,185,191,196,201,205,210,,,228,231',
'232,235,240,,,169,172,174,182,187,193,197,,,211,215,221,224,229,233',
'236,241,242,244,168,171,173,178,183,189,199,203,207,213,218,223,226',
'70,74,234,83,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181',
'186,192,,,,,,220,,668,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,,,237,299,300,276,279,282,285,288,290,292,294,296,,301,278,,,284',
'287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300',
'276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,',
',,,295,,298,,277,280,283,286,289,291,293,,297,,,,,,,,,,,,,,,,281,,589',
'299,300,276,279,282,285,288,290,292,294,296,,301,278,,,284,287,,,,-217',
',,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,,,,,,,580,371,,',
'581,,,,,281,,-217,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181',
'186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225',
'606,365,237,,607,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,',
'177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212',
'216,,225,505,371,237,,506,,,,,,,,184,190,,200,204,214,219,,227,230,',
',239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,719,365,237,,720,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,505,371,237,,506,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,580,371,237,,581,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,578,365,237,,579,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,505,371,237,,506,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,559,371,237',
',560,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,556',
'365,237,,557,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,370,371,237,,372,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,364,365,237,,366,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,895,365,237,,896,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,897,371,237,,898,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,505,371,237,,506,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,505,371,237,,506,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,608,371,237,,609,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,749,365,237',
',750,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,',
'237,299,300,276,279,282,285,288,290,292,294,296,,301,278,,,284,287,',
',,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,281,646,284,287,,,,,,,,,,,',
',,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285',
'288,290,292,294,296,,301,278,266,281,284,287,,,,,,,,,,,,,,295,,298,',
'277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290,292',
'294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286',
'289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301,278',
',281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297',
'299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,',
',,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279',
'282,285,288,290,292,294,296,,301,278,266,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,,,,,,,,,,,,,,,,281' ]
racc_action_table = arr = Array.new(23926, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

clist = [
'67,324,633,633,105,381,712,67,67,67,135,370,67,67,67,417,67,696,99,571',
'651,99,150,1,616,41,67,67,821,616,386,557,771,41,638,67,67,8,67,67,67',
'67,67,898,337,556,415,400,645,337,415,712,370,537,818,135,370,651,895',
'571,32,32,897,386,67,67,67,67,67,67,67,67,67,67,67,67,67,67,99,99,67',
'67,67,541,150,67,381,105,67,633,637,67,400,67,557,67,307,67,696,67,67',
'67,67,67,67,67,381,67,556,67,253,324,557,324,253,253,324,417,696,385',
'8,366,67,67,67,67,556,67,366,366,366,67,557,895,366,366,417,366,821',
'697,821,417,771,821,771,636,556,771,609,537,111,537,385,898,537,898',
'366,366,898,366,366,366,366,366,818,621,818,483,895,818,895,563,897',
'895,897,602,108,897,559,541,602,541,132,560,541,366,366,366,366,366',
'366,366,366,366,366,366,366,366,366,654,483,366,366,366,563,366,307',
'224,307,366,854,307,609,7,224,619,366,854,366,719,366,366,366,366,366',
'366,366,132,366,609,366,111,390,331,130,697,331,697,339,333,697,130',
'333,366,366,127,366,364,366,609,366,111,366,609,364,364,364,108,581',
'559,364,364,608,364,560,580,854,218,345,719,618,345,364,463,218,7,719',
'108,352,559,657,719,364,364,560,364,364,364,364,364,130,19,390,390,36',
'36,7,348,339,339,339,390,719,581,463,127,127,127,463,463,580,364,364',
'364,364,364,364,364,364,364,364,364,364,364,364,719,608,364,364,364',
'855,364,19,617,601,364,19,855,352,352,352,601,364,608,364,659,364,364',
'364,364,364,364,364,223,364,364,364,348,348,348,223,104,347,608,79,347',
'853,608,104,364,364,79,364,853,364,213,364,229,364,578,578,578,213,578',
'229,664,855,578,578,862,601,862,578,615,578,578,578,578,578,578,578',
'847,335,614,335,578,578,578,578,578,578,578,880,798,110,110,233,104',
'798,880,79,578,853,233,578,578,578,578,578,578,578,578,578,578,610,578',
'578,501,578,578,578,554,671,208,501,591,847,847,847,847,208,448,419',
'674,418,606,680,42,448,643,578,578,42,578,578,607,578,578,880,578,589',
'578,607,578,156,578,588,607,158,306,306,156,554,578,501,158,554,504',
'578,578,578,578,578,578,504,504,504,578,578,504,504,504,419,504,418',
'606,578,448,159,419,586,418,606,504,419,159,418,606,649,649,734,607',
'504,504,720,504,504,504,504,504,156,720,413,896,158,419,720,418,606',
'413,896,5,905,725,451,896,428,161,5,905,725,451,236,428,161,582,464',
'575,419,236,418,606,504,763,159,734,734,734,734,504,763,66,234,572,504',
'504,561,717,66,234,720,731,717,700,731,731,731,464,413,896,558,464,464',
'464,464,703,504,5,905,725,451,555,428,161,579,579,579,706,579,504,763',
'504,579,579,504,327,327,579,548,579,579,579,579,579,579,579,731,731',
'731,731,579,579,579,579,579,579,579,274,38,372,466,58,58,58,58,58,579',
'882,882,579,579,579,579,579,579,579,579,579,579,544,579,579,535,579',
'579,579,467,595,595,543,543,466,543,543,543,466,466,526,274,38,372,524',
'274,38,372,579,579,713,579,579,521,579,579,716,579,508,579,467,579,502',
'579,467,467,467,467,736,736,500,579,721,499,498,507,579,579,579,579',
'579,579,507,507,507,579,579,507,507,507,491,507,726,490,579,452,452',
'452,452,452,489,507,148,148,148,148,148,487,482,738,507,507,739,507',
'507,507,507,507,740,479,743,745,422,422,747,749,422,750,475,460,457',
'756,759,760,422,422,762,422,422,422,422,449,422,422,764,447,422,446',
'768,429,507,422,422,422,422,410,772,507,406,380,373,362,507,507,346',
'782,784,422,422,787,422,422,422,422,422,422,422,422,422,336,422,789',
'330,422,507,328,310,309,799,308,802,803,270,270,270,270,270,507,807',
'507,270,270,507,808,811,270,275,270,270,270,270,270,270,270,264,263',
'820,260,270,270,270,270,270,270,270,823,258,270,162,830,831,160,833',
'270,270,270,270,270,270,270,270,270,270,270,270,270,270,149,270,270',
'838,270,270,270,147,841,145,144,143,136,134,128,121,856,120,116,115',
'113,866,112,869,109,874,270,875,876,270,94,90,270,270,81,270,50,270',
'881,47,888,270,632,43,891,632,632,632,39,270,24,18,16,899,270,270,270',
'270,270,270,10,3,906,270,270,82,82,82,,82,270,,,82,82,,,,82,,82,82,82',
'82,82,82,82,632,632,632,632,82,82,82,82,82,82,82,,,82,,,,,519,,82,,',
'82,82,82,82,82,82,82,82,82,82,,82,82,,82,82,82,519,519,519,519,519,519',
'519,519,519,519,519,,519,519,,,519,519,,82,,,82,,,82,82,,82,,,519,,519',
'82,519,519,519,519,519,519,519,82,519,,,,82,82,82,82,82,82,,,,82,82',
'82,519,,519,,82,815,815,815,815,815,815,,,,815,815,,,,815,,815,815,815',
'815,815,815,815,,,,,815,815,815,815,815,815,815,,,815,,,,,,815,815,815',
'815,815,815,815,815,815,815,815,815,815,815,,815,815,,815,815,815,468',
',,,,,,,,,,,,,,,468,468,,815,,,815,,,815,815,,815,,815,468,,468,815,468',
'468,468,468,,,468,815,468,,,,815,815,815,815,815,815,,,,815,815,776',
'776,776,776,776,776,,,,776,776,,,,776,,776,776,776,776,776,776,776,',
',,,776,776,776,776,776,776,776,,,776,,,,,,776,776,776,776,776,776,776',
'776,776,776,776,776,776,776,,776,776,,776,776,776,480,480,480,480,480',
'480,480,,,480,480,,,,,,480,480,,776,,,776,,,776,776,,776,,776,480,,480',
'776,480,480,480,480,480,480,480,776,480,,,,776,776,776,776,776,776,',
',,776,776,503,503,503,503,503,503,,,,503,503,,,,503,,503,503,503,503',
'503,503,503,,,,,503,503,503,503,503,503,503,,,503,,,,,,503,503,503,503',
'503,503,503,503,503,503,503,503,503,503,,503,503,,503,503,503,481,481',
'481,481,481,481,481,481,481,481,481,,481,481,,,481,481,,503,,,503,,',
'503,503,,503,,503,481,,481,503,481,481,481,481,481,481,481,503,481,',
',,503,503,503,503,503,503,,,,503,503,724,724,724,724,724,724,,,,724',
'724,,,,724,,724,724,724,724,724,724,724,,,,,724,724,724,724,724,724',
'724,,,724,,,,,,724,724,724,724,724,724,724,724,724,724,724,724,724,724',
',724,724,,724,724,724,456,456,456,456,456,456,456,,,456,456,,,,,,456',
'456,,724,,,724,,,724,724,,724,,724,456,,456,724,456,456,456,456,456',
'456,456,724,456,,,,724,724,724,724,724,724,,,,724,724,523,523,523,523',
'523,523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,,523,523,523',
'523,523,523,523,,,523,,,,,,523,523,523,523,523,523,523,523,523,523,523',
'523,523,523,,523,523,,523,523,523,458,458,458,458,458,458,458,458,458',
'458,458,,458,458,,,458,458,,523,,,523,,,523,523,,523,,523,458,,458,523',
'458,458,458,458,458,458,458,523,458,,,,523,523,523,523,523,523,,,,523',
'523,781,781,781,781,781,781,,,,781,781,,,,781,,781,781,781,781,781,781',
'781,,,,,781,781,781,781,781,781,781,,,781,,,,,,781,781,781,781,781,781',
'781,781,781,781,781,781,781,781,,781,781,,781,781,781,465,,,,,,,,,,',
',,,,,465,465,,781,,,781,,,781,781,,781,,781,465,,465,781,465,465,465',
'465,,,465,781,465,,,,781,781,781,781,781,781,,,,781,781,542,542,542',
'542,542,542,,,,542,542,,,,542,,542,542,542,542,542,542,542,,,,,542,542',
'542,542,542,542,542,,,542,,,,,,542,542,542,542,542,542,542,542,542,542',
'542,542,542,542,,542,542,,542,542,542,469,,,,,,,,,,,,,,,,469,469,,542',
',,542,,,542,542,,542,,542,469,,469,542,469,469,469,469,,,469,542,469',
',,,542,542,542,542,542,542,,,,542,542,311,311,311,311,311,311,,,,311',
'311,,,,311,,311,311,311,311,311,311,311,,,,,311,311,311,311,311,311',
'311,,,311,,,,,,311,311,311,311,311,311,311,311,311,311,311,311,311,311',
',311,311,,311,311,311,470,470,470,470,470,470,470,,,470,470,,,,,,470',
'470,,311,,,311,,,311,311,,311,,311,470,,470,311,470,470,470,470,470',
'470,470,311,470,,,,311,311,311,311,311,311,,,,311,311,302,302,302,302',
'302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,302,302,302',
'302,302,302,302,,,302,,,,,,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,,302,302,,302,302,302,462,462,462,462,462,462,462,,,462',
'462,,,,,,462,462,,302,,,302,,,302,302,,302,,302,462,,462,302,462,462',
'462,462,462,462,462,302,462,,,,302,302,302,302,302,302,,,,302,302,775',
'775,775,775,775,775,,,,775,775,,,,775,,775,775,775,775,775,775,775,',
',,,775,775,775,775,775,775,775,,,775,,,,,,775,775,775,775,775,775,775',
'775,775,775,775,775,775,775,,775,775,,775,775,775,471,,,,,,,,,,,,,,',
',471,471,,775,,,775,,,775,775,,775,,775,471,,471,775,471,471,471,471',
',,471,775,471,,,,775,775,775,775,775,775,,,,775,775,485,485,485,485',
'485,485,,,,485,485,,,,485,,485,485,485,485,485,485,485,,,,,485,485,485',
'485,485,485,485,,,485,,,,,,485,485,485,485,485,485,485,485,485,485,485',
'485,485,485,,485,485,,485,485,485,472,472,472,472,472,472,472,472,,472',
'472,,,,,,472,472,,485,,,485,,,485,485,,485,,485,472,,472,485,472,472',
'472,472,472,472,472,485,472,,,,485,485,485,485,485,485,,,,485,485,265',
'265,265,265,265,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,',
',,,265,265,265,265,265,265,265,,,265,,,,,,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,,265,265,,265,265,265,476,476,476,476,476',
'476,476,,,476,476,,,,,,476,476,,265,,,265,,,265,265,,265,,265,476,,476',
'265,476,476,476,476,476,476,476,265,476,,,,265,265,265,265,265,265,',
',,265,265,626,626,626,626,626,626,,,,626,626,,,,626,,626,626,626,626',
'626,626,626,,,,,626,626,626,626,626,626,626,,,626,,,,,,626,626,626,626',
'626,626,626,626,626,626,626,626,626,626,,626,626,,626,626,626,474,474',
'474,474,474,474,474,,,474,474,,,,,,474,474,,626,,,626,,,626,626,,626',
',626,474,,474,626,474,474,474,474,474,474,474,626,474,,,,626,626,626',
'626,626,626,,,,626,626,827,827,827,827,827,827,,,,827,827,,,,827,,827',
'827,827,827,827,827,827,,,,,827,827,827,827,827,827,827,,,827,,,,,,827',
'827,827,827,827,827,827,827,827,827,827,827,827,827,,827,827,,827,827',
'827,459,459,459,459,459,459,459,,,459,459,,,,,,459,459,,827,,,827,,',
'827,827,,827,,827,459,,459,827,459,459,459,459,459,459,459,827,459,',
',,827,827,827,827,827,827,,,,827,827,702,702,702,702,702,702,,,,702',
'702,,,,702,,702,702,702,702,702,702,702,,,,,702,702,702,702,702,702',
'702,,,702,,,,,,702,702,702,702,702,702,702,702,702,702,702,702,702,702',
',702,702,,702,702,702,478,,,,,,,,,,,,,,,,478,478,,702,,,702,,,702,702',
',702,,702,478,,,702,478,478,478,478,,,,702,,,,,702,702,702,702,702,702',
',,,702,702,699,699,699,699,699,699,,,,699,699,,,,699,,699,699,699,699',
'699,699,699,,,,,699,699,699,699,699,699,699,,,699,,,,,,699,699,699,699',
'699,699,699,699,699,699,699,699,699,699,,699,699,,699,699,699,473,,',
',,,,,,,,,,,,,473,473,,699,,,699,,,699,699,,699,,699,473,,473,699,473',
'473,473,473,,,,699,,,,,699,699,699,699,699,699,,,,699,699,163,163,163',
'163,163,163,,,,163,163,,,,163,,163,163,163,163,163,163,163,,,,,163,163',
'163,163,163,163,163,,,163,,,,,,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,,163,163,,163,163,163,477,,,,,,,,,,,,,,,,477,477,,163',
',,163,,,163,163,,163,,163,477,,477,163,477,477,477,477,,,,163,,,,,163',
'163,163,163,163,163,,,,163,163,832,832,832,832,832,832,,,,832,832,,',
',832,,832,832,832,832,832,832,832,,,,,832,832,832,832,832,832,832,,',
'832,,,,,,832,832,832,832,832,832,832,832,832,832,832,832,832,832,,832',
'832,,832,832,832,,,,,,,,,,,,,,,,,,,,832,,,832,,,832,832,,832,,832,,',
',832,,,,,,,,832,,,,,832,832,832,832,832,832,,,,832,832,843,843,843,843',
'843,843,,,,843,843,,,,843,,843,843,843,843,843,843,843,,,,,843,843,843',
'843,843,843,843,,,843,,,,,,843,843,843,843,843,843,843,843,843,843,843',
'843,843,843,,843,843,,843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843',
'843,,843,,843,,,,843,,,,,,,,843,,,,,843,843,843,843,843,843,,,,843,843',
'846,846,846,846,846,846,,,,846,846,,,,846,,846,846,846,846,846,846,846',
',,,,846,846,846,846,846,846,846,,,846,,,,,,846,846,846,846,846,846,846',
'846,846,846,846,846,846,846,,846,846,,846,846,846,,,,,,,,,,,,,,,,,,',
',846,,,846,,,846,846,,846,,846,,,,846,,,,,,,,846,,,,,846,846,846,846',
'846,846,,,,846,846,139,139,139,139,139,139,,,,139,139,,,,139,,139,139',
'139,139,139,139,139,,,,,139,139,139,139,139,139,139,,,139,,,,,,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,,139,139,,139,139,139',
',,,,,,,,,,,,,,,,,,,139,,,139,,,139,139,,139,,139,,,,139,,,,,,,,139,',
',,,139,139,139,139,139,139,,,,139,139,612,612,612,612,612,612,,,,612',
'612,,,,612,,612,612,612,612,612,612,612,,,,,612,612,612,612,612,612',
'612,,,612,,,,,,612,612,612,612,612,612,612,612,612,612,612,612,612,612',
',612,612,,612,612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,612,,612',
',,,612,,,,,,,,612,,,,,612,612,612,612,612,612,,,,612,612,742,742,742',
'742,742,742,,,,742,742,,,,742,,742,742,742,742,742,742,742,,,,,742,742',
'742,742,742,742,742,,,742,,,,,,742,742,742,742,742,742,742,742,742,742',
'742,742,742,742,,742,742,,742,742,742,,,,,,,,,,,,,,,,,,,,742,,,742,',
',742,742,,742,,742,,,,742,,,,,,,,742,,,,,742,742,742,742,742,742,,,',
'742,742,754,754,754,754,754,754,,,,754,754,,,,754,,754,754,754,754,754',
'754,754,,,,,754,754,754,754,754,754,754,,,754,,,,,,754,754,754,754,754',
'754,754,754,754,754,754,754,754,754,,754,754,,754,754,754,,,,,,,,,,',
',,,,,,,,,754,,,754,,,754,754,,754,,754,,,,754,,,,,,,,754,,,,,754,754',
'754,754,754,754,,,,754,754,54,54,54,54,54,54,,,,54,54,,,,54,,54,54,54',
'54,54,54,54,,,,,54,54,54,54,54,54,54,,,54,,,,,,54,54,54,54,54,54,54',
'54,54,54,54,54,54,54,,54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,,,54',
'54,,54,,54,,,,54,,,,,,,,54,,,,,54,54,54,54,54,54,,,,54,54,858,858,858',
'858,858,858,,,,858,858,,,,858,,858,858,858,858,858,858,858,,,,,858,858',
'858,858,858,858,858,,,858,,,,,,858,858,858,858,858,858,858,858,858,858',
'858,858,858,858,,858,858,,858,858,858,,,,,,,,,,,,,,,,,,,,858,,,858,',
',858,858,,858,,858,,,,858,,,,,,,,858,,,,,858,858,858,858,858,858,,,',
'858,858,860,860,860,860,860,860,,,,860,860,,,,860,,860,860,860,860,860',
'860,860,,,,,860,860,860,860,860,860,860,,,860,,,,,,860,860,860,860,860',
'860,860,860,860,860,860,860,860,860,,860,860,,860,860,860,,,,,,,,,,',
',,,,,,,,,860,,,860,,,860,860,,860,,860,,,,860,,,,,,,,860,,,,,860,860',
'860,860,860,860,,,,860,860,2,2,2,2,2,2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,',
',,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2,2,2,2,2,2,2,2,,2,2,,2,2,2,,,',
',,,,,,,,,,,,,,,,2,,,2,,,2,2,,2,,2,,,,2,,,,,,,,2,,,,,2,2,2,2,2,2,,,,2',
'2,455,455,455,455,455,455,,,,455,455,,,,455,,455,455,455,455,455,455',
'455,,,,,455,455,455,455,455,455,455,,,455,,,,,,455,455,455,455,455,455',
'455,455,455,455,455,455,455,455,,455,455,,455,455,455,,,,,,,,,,,,,,',
',,,,,455,,,455,,,455,455,,455,,455,,,,455,,,,,,,,455,,,,,455,455,455',
'455,455,455,,,,455,455,547,547,547,,547,,,,547,547,,,,547,,547,547,547',
'547,547,547,547,,,,,547,547,547,547,547,547,547,,,,,,,,,,547,,,547,547',
'547,547,547,547,547,547,547,547,,547,547,,547,547,547,,,,,,,,,,,,,,',
',,,,,547,,,547,,,547,547,,547,,,,,,547,,,,,,,,547,,,,,547,547,547,547',
'547,547,,,,547,547,63,63,63,,63,,,,63,63,,,,63,,63,63,63,63,63,63,63',
',,,,63,63,63,63,63,63,63,,,63,,,,,,,63,,,63,63,63,63,63,63,63,63,63',
'63,,63,63,,63,63,63,,,,,,,,,,,,,,,,,,,,63,,,63,,,63,63,,63,,,,,,63,',
',,,,,,63,,,,,63,63,63,63,63,63,,,,63,63,426,426,426,,426,,,,426,426',
',,,426,,426,426,426,426,426,426,426,,,,,426,426,426,426,426,426,426',
',,,,,,,,,426,,,426,426,426,426,426,426,426,426,426,426,,426,426,,426',
'426,426,,,,,,,,,,,,,,,,,,,,426,,,426,,,426,426,,426,,426,,,,426,,,,',
',,,426,,,,,426,426,426,426,426,426,,,,426,426,60,60,60,,60,,,,60,60',
',,,60,,60,60,60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,,,,,,,,60,,,60',
'60,60,60,60,60,60,60,60,60,,60,60,,60,60,60,,,,,,,,,,,,,,,,,,,,60,,',
'60,60,,60,60,,60,,60,,60,,60,,,,,,,,60,,,,,60,60,60,60,60,60,,,,60,60',
'72,72,72,,72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,72,72,72,72,72',
'72,72,,,72,,,,,,,72,,,72,72,72,72,72,72,72,72,72,72,,72,72,,72,72,72',
',,,,,,,,,,,,,,,,,,,72,,,72,,,72,72,,72,,,,,,72,,,,,,,,72,,,,,72,72,72',
'72,72,72,,,,72,72,76,76,76,,76,,,,76,76,,,,76,,76,76,76,76,76,76,76',
',,,,76,76,76,76,76,76,76,,,,,,,,,,76,,,76,76,76,76,76,76,76,76,76,76',
',76,76,,76,76,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,76,,76,,,,76,,',
',,,,,76,,,,,76,76,76,76,76,76,,,,76,76,78,78,78,,78,,,,78,78,,,,78,',
'78,78,78,78,78,78,78,,78,,,78,78,78,78,78,78,78,,,,,,,,,,78,,,78,78',
'78,78,78,78,78,78,78,78,,78,78,,78,78,78,,,,,,,,,,,,,,,,,,,,78,,,78',
'78,,78,78,,78,,78,,78,,78,,,,,,,,78,,78,,,78,78,78,78,78,78,,,,78,78',
'755,755,755,,755,,,,755,755,,,,755,,755,755,755,755,755,755,755,,,,',
'755,755,755,755,755,755,755,,,755,,,,,,,755,,,755,755,755,755,755,755',
'755,755,755,755,,755,755,,755,755,755,,,,,,,,,,,,,,,,,,,,755,,,755,',
',755,755,,755,,,,,,755,,,,,,,,755,,,,,755,755,755,755,755,755,,,,755',
'755,879,879,879,,879,,,,879,879,,,,879,,879,879,879,879,879,879,879',
',,,,879,879,879,879,879,879,879,,,,,,,,,,879,,,879,879,879,879,879,879',
'879,879,879,879,,879,879,,879,879,879,,,,,,,,,,,,,,,,,,,,879,,,879,',
',879,879,,879,,879,,,,879,,,,,,,,879,,,,,879,879,879,879,879,879,,,',
'879,879,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59,59,59,,59,,,59,59',
'59,59,59,59,59,,,,,,,,,,59,,,59,59,59,59,59,59,59,59,59,59,,59,59,,59',
'59,59,,,,,,,,,,,,,,,,,,,,59,,,59,59,,59,59,,59,,59,,59,,59,,,,,,,,59',
',59,,,59,59,59,59,59,59,,,,59,59,450,450,450,,450,,,,450,450,,,,450',
',450,450,450,450,450,450,450,,,,,450,450,450,450,450,450,450,,,,,,,',
',,450,,,450,450,450,450,450,450,450,450,450,450,801,450,450,801,801',
'801,450,,,,,,,,,,,,,,,,,,,,450,,,450,,,450,450,,450,,,801,,,,,,,801',
'801,801,801,,,,,,450,450,450,450,450,450,,,,450,450,87,87,87,,87,,,',
'87,87,,,,87,,87,87,87,87,87,87,87,,,,,87,87,87,87,87,87,87,,,,,,,,,',
'87,,,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,,,,,,,,,,,,',
',,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87,,,,,87,87,87,87,87,87,,,,87',
'87,639,639,639,,639,,,,639,639,,,,639,,639,639,639,639,639,639,639,',
',,,639,639,639,639,639,639,639,,,,,,,,,,639,,,639,639,639,639,639,639',
'639,639,639,639,,639,639,,639,639,639,,,,,,,,,,,,,,,,,,,,639,,,639,',
',639,639,,639,,639,,,,639,,,,,,,,639,,,,,639,639,639,639,639,639,,,',
'639,639,646,646,646,,646,,,,646,646,,,,646,,646,646,646,646,646,646',
'646,,,,,646,646,646,646,646,646,646,,,,,,,,,,646,,,646,646,646,646,646',
'646,646,646,646,646,,646,646,,646,646,646,,,,,,,,,,,,,,,,,,,,646,,,646',
',,646,646,,646,,,,,,646,,,,,,,,646,,,,,646,646,646,646,646,646,,,,646',
'646,96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,,,,,96,96,96,96',
'96,96,96,,,,,,,,,,96,,,96,96,96,96,96,96,96,96,96,96,435,96,96,435,435',
'435,96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96,,,435,,,,,,,435,435,435',
'435,,,,,,96,96,96,96,96,96,,,,96,96,97,97,97,,97,,,,97,97,,,,97,,97',
'97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,97,,,,,,,97,,,97,97,97',
'97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97',
'97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,,,,97,97,6,6,6,,6,,,',
'6,6,,,,6,,6,6,6,6,6,6,6,,,,,6,6,6,6,6,6,6,,,,,,,,,,6,,,6,6,6,6,6,6,6',
'6,6,6,,6,6,,,,6,,,,,,,,,,,,,,,,,,,,6,,,6,,,6,6,,6,,6,,,,,,,,,,,,,,,',
',6,6,6,6,6,6,,,,6,6,733,733,733,,733,,,,733,733,,,,733,,733,733,733',
'733,733,733,733,,,,,733,733,733,733,733,733,733,,,,,,,,,,733,,,733,733',
'733,733,733,733,733,733,733,733,,733,733,,733,733,733,,,,,,,,,,,,,,',
',,,,,733,,,733,,,733,733,,733,,,,,,733,,,,,,,,733,,,,,733,733,733,733',
'733,733,,,,733,733,445,445,445,,445,,,,445,445,,,,445,,445,445,445,445',
'445,445,445,,,,,445,445,445,445,445,445,445,,,,,,,,,,445,,,445,445,445',
'445,445,445,445,445,445,445,,445,445,,445,445,445,,,,,,,,,,,,,,,,,,',
',445,,,445,,,445,445,,445,,,,,,445,,,,,,,,445,,,,,445,445,445,445,445',
'445,,,,445,445,103,103,103,,103,,,,103,103,,,,103,,103,103,103,103,103',
'103,103,,,,,103,103,103,103,103,103,103,,,,,,,,,,103,,,103,103,103,103',
'103,103,103,103,103,103,,103,103,,103,103,103,,,,,,,,,,,,,,,,,,,,103',
',,103,,,103,103,,103,,103,,,,103,,,,,,,,103,,,,,103,103,103,103,103',
'103,,,,103,103,444,444,444,,444,,,,444,444,,,,444,,444,444,444,444,444',
'444,444,,,,,444,444,444,444,444,444,444,,,,,,,,,,444,,,444,444,444,444',
'444,444,444,444,444,444,,444,444,,444,444,444,,,,,,,,,,,,,,,,,,,,444',
',,444,,,444,444,,444,,,,,,444,,,,,,,,444,,,,,444,444,444,444,444,444',
',,,444,444,437,437,437,437,437,437,437,437,,,437,437,437,437,437,,,437',
'437,437,437,437,437,437,,,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,437,437,437,437,437,,,437,,,,,,,,437,437',
',437,437,437,437,,437,437,,,437,,,,,437,437,437,437,,,,,,,,,,,,,437',
'437,,437,437,437,437,437,437,437,437,437,,437,,,437,437,,,436,436,436',
',436,,,437,436,436,,,,436,,436,436,436,436,436,436,436,,,,,436,436,436',
'436,436,436,436,,,436,,,,,,,436,,,436,436,436,436,436,436,436,436,436',
'436,,436,436,,436,436,436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,436',
',,,,,436,,,,,,,,436,,,,,436,436,436,436,436,436,,,,436,436,871,871,871',
',871,,,,871,871,,,,871,,871,871,871,871,871,871,871,,,,,871,871,871',
'871,871,871,871,,,,,,,,,,871,,,871,871,871,871,871,871,871,871,871,871',
',871,871,,871,871,871,,,,,,,,,,,,,,,,,,,,871,,,871,,,871,871,,871,,',
',,,871,,,,,,,,871,,,,,871,871,871,871,871,871,,,,871,871,598,598,598',
',598,,,,598,598,,,,598,,598,598,598,598,598,598,598,,,,,598,598,598',
'598,598,598,598,,,,,,,,,,598,,,598,598,598,598,598,598,598,598,598,598',
',598,598,,598,598,598,,,,,,,,,,,,,,,,,,,,598,,,598,,,598,598,,598,,598',
',,,598,,,,,,,,598,,,,,598,598,598,598,598,598,,,,598,598,769,769,769',
',769,,,,769,769,,,,769,,769,769,769,769,769,769,769,,,,,769,769,769',
'769,769,769,769,,,,,,,,,,769,,,769,769,769,769,769,769,769,769,769,769',
',769,769,,769,769,769,,,,,,,,,,,,,,,,,,,,769,,,769,,,769,769,,769,,',
',,,769,,,,,,,,769,,,,,769,769,769,769,769,769,,,,769,769,20,20,20,,20',
',,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20,20,20,20,,,,,,',
',,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20,,,,,,,,,,,,,',
',,,,,,20,,,20,,,20,20,,20,,,,,,20,,,,,,,,20,,,,,20,20,20,20,20,20,,',
',20,20,863,863,863,,863,,,,863,863,,,,863,,863,863,863,863,863,863,863',
',,,,863,863,863,863,863,863,863,,,,,,,,,,863,,,863,863,863,863,863,863',
'863,863,863,863,,863,863,,863,863,863,,,,,,,,,,,,,,,,,,,,863,,,863,',
',863,863,,863,,,,,,863,,,,,,,,863,,,,,863,863,863,863,863,863,,,,863',
'863,723,723,723,,723,,,,723,723,,,,723,,723,723,723,723,723,723,723',
',,,,723,723,723,723,723,723,723,,,723,,,,,,,723,,,723,723,723,723,723',
'723,723,723,723,723,,723,723,,723,723,723,,,,,,,,,,,,,,,,,,,,723,,,723',
',,723,723,,723,,,,,,723,,,,,,,,723,,,,,723,723,723,723,723,723,,,,723',
'723,669,669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669',
',,,,669,669,669,669,669,669,669,,,,,,,,,,669,,,669,669,669,669,669,669',
'669,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,',
',669,669,,669,,669,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,',
'669,669,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56',
'56,56,56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56',
'56,56,,,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56',
',,,,56,56,56,56,56,56,,,,56,56,454,454,454,,454,,,,454,454,,,,454,,454',
'454,454,454,454,454,454,,,,,454,454,454,454,454,454,454,,,,,,,,,,454',
',,454,454,454,454,454,454,454,454,454,454,,454,454,,454,454,454,,,,',
',,,,,,,,,,,,,,,454,,,454,,,454,454,,454,,,,,,454,,,,,,,,454,,,,,454',
'454,454,454,454,454,,,,454,454,124,124,124,,124,,,,124,124,,,,124,,124',
'124,124,124,124,124,124,,,,,124,124,124,124,124,124,124,,,,,,,,,,124',
',,124,124,124,124,124,124,124,124,124,124,,124,124,,124,124,124,,,,',
',,,,,,,,,,,,,,,124,,,124,,,124,124,,124,,124,,124,,124,,,,,,,,124,,',
',,124,124,124,124,124,124,,,,124,124,903,903,903,,903,,,,903,903,,,',
'903,,903,903,903,903,903,903,903,,,,,903,903,903,903,903,903,903,,,',
',,,,,,903,,,903,903,903,903,903,903,903,903,903,903,,903,903,,903,903',
'903,,,,,,,,,,,,,,,,,,,,903,,,903,,,903,903,,903,,,,,,903,,,,,,,,903',
',,,,903,903,903,903,903,903,,,,903,903,593,593,593,,593,,,,593,593,',
',,593,,593,593,593,593,593,593,593,,,,,593,593,593,593,593,593,593,',
',,,,,,,,593,,,593,593,593,593,593,593,593,593,593,593,,593,593,,593',
'593,593,,,,,,,,,,,,,,,,,,,,593,,,593,,,593,593,,593,,,,,,593,,,,,,,',
'593,,,,,593,593,593,593,593,593,,,,593,593,673,673,673,,673,,,,673,673',
',,,673,,673,673,673,673,673,673,673,,,,,673,673,673,673,673,673,673',
',,,,,,,,,673,,,673,673,673,673,673,673,673,673,673,673,,673,673,,673',
'673,673,,,,,,,,,,,,,,,,,,,,673,,,673,,,673,673,,673,,673,,,,673,,,,',
',,,673,,,,,673,673,673,673,673,673,,,,673,673,131,131,131,,131,,,,131',
'131,,,,131,,131,131,131,131,131,131,131,,,,,131,131,131,131,131,131',
'131,,,,,,,,,,131,,,131,131,131,131,131,131,131,131,131,131,,131,131',
',131,131,131,,,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,131,,,,,,131,,',
',,,,,131,,,,,131,131,131,131,131,131,,,,131,131,587,587,587,,587,,,',
'587,587,,,,587,,587,587,587,587,587,587,587,,,,,587,587,587,587,587',
'587,587,,,,,,,,,,587,,,587,587,587,587,587,587,587,587,587,587,,587',
'587,,587,587,587,,,,,,,,,,,,,,,,,,,,587,,,587,,,587,587,,587,,,,,,587',
',,,,,,,587,,,,,587,587,587,587,587,587,,,,587,587,11,11,11,,11,,,,11',
'11,,,,11,,11,11,11,11,11,11,11,,,,,11,11,11,11,11,11,11,,,,,,,,,,11',
',,11,11,11,11,11,11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,,,,,,,',
'11,,,11,,,11,11,,11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11,11,,,,11',
'11,695,695,695,,695,,,,695,695,,,,695,,695,695,695,695,695,695,695,',
',,,695,695,695,695,695,695,695,,,,,,,,,,695,,,695,695,695,695,695,695',
'695,695,695,695,,695,695,,695,695,695,,,,,,,,,,,,,,,,,,,,695,,,695,',
',695,695,,695,,,,,,695,,,,,,,,695,,,,,695,695,695,695,695,695,,,,695',
'695,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53,53,53',
'53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53,53,53,53,,53,53,,53,53',
'53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,,,,,53,,,,,,,,53,,,,,53,53',
'53,53,53,53,,,,53,53,51,51,51,,51,,,,51,51,,,,51,,51,51,51,51,51,51',
'51,,,,,51,51,51,51,51,51,51,,,,,,,,,,51,,,51,51,51,51,51,51,51,51,51',
'51,,51,51,,51,51,51,,,,,,,,,,,,,,,,,,,,51,,,51,,,51,51,,51,,51,,51,',
'51,,,,,,,,51,,,,,51,51,51,51,51,51,,,,51,51,412,412,412,,412,,,,412',
'412,,,,412,,412,412,412,412,412,412,412,,,,,412,412,412,412,412,412',
'412,,,412,,,,,,,412,,,412,412,412,412,412,412,412,412,412,412,,412,412',
',412,412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412,,,,,,412,,',
',,,,,412,,,,,412,412,412,412,412,412,,,,412,412,141,141,141,,141,,,',
'141,141,,,,141,,141,141,141,141,141,141,141,,,,,141,141,141,141,141',
'141,141,,,,,,,,,,141,,,141,141,141,141,141,141,141,141,141,141,,141',
'141,,141,141,141,,,,,,,,,,,,,,,,,,,,141,,,141,,,141,141,,141,,,,,,141',
',,,,,,,141,,,,,141,141,141,141,141,141,,,,141,141,668,668,668,,668,',
',,668,668,,,,668,,668,668,668,668,668,668,668,,,,,668,668,668,668,668',
'668,668,,,,,,,,,,668,,,668,668,668,668,668,668,668,668,668,668,,668',
'668,,668,668,668,,,,,,,,,,,,,,,,,,,,668,,,668,,,668,668,,668,,,,,,668',
',,,,,,,668,,,,,668,668,668,668,668,668,,,,668,668,889,889,889,,889,',
',,889,889,,,,889,,889,889,889,889,889,889,889,,,,,889,889,889,889,889',
'889,889,,,,,,,,,,889,,,889,889,889,889,889,889,889,889,889,889,,889',
'889,,889,889,889,,,,,,,,,,,,,,,,,,,,889,,,889,,,889,889,,889,,889,,889',
',889,,,,,,,,889,,,,,889,889,889,889,889,889,,,,889,889,407,407,407,',
'407,,,,407,407,,,,407,,407,407,407,407,407,407,407,,,,,407,407,407,407',
'407,407,407,,,,,,,,,,407,,,407,407,407,407,407,407,407,407,407,407,',
'407,407,,407,407,407,,,,,,,,,,,,,,,,,,,,407,,,407,,,407,407,,407,,407',
',407,,407,,,,,,,,407,,,,,407,407,407,407,407,407,,,,407,407,146,146',
'146,,146,,,,146,146,,,,146,,146,146,146,146,146,146,146,,,,,146,146',
'146,146,146,146,146,,,,,,,,,,146,,,146,146,146,146,146,146,146,146,146',
'146,,146,146,,146,146,146,,,,,,,,,,,,,,,,,,,,146,,,146,,,146,146,,146',
',,,,,146,,,,,,,,146,,,,,146,146,146,146,146,146,,,,146,146,839,839,839',
',839,,,,839,839,,,,839,,839,839,839,839,839,839,839,,,,,839,839,839',
'839,839,839,839,,,,,,,,,,839,,,839,839,839,839,839,839,839,839,839,839',
',839,839,,839,839,839,,,,,,,,,,,,,,,,,,,,839,,,839,,,839,839,,839,,839',
',839,,839,,,,,,,,839,,,,,839,839,839,839,839,839,,,,839,839,773,773',
'773,,773,,,,773,773,,,,773,,773,773,773,773,773,773,773,,,,,773,773',
'773,773,773,773,773,,,,,,,,,,773,,,773,773,773,773,773,773,773,773,773',
'773,,773,773,,773,773,773,,,,,,,,,,,,,,,,,,,,773,,,773,,,773,773,,773',
',,,,,773,,,,,,,,773,,,,,773,773,773,773,773,773,,,,773,773,836,836,836',
',836,,,,836,836,,,,836,,836,836,836,836,836,836,836,,,,,836,836,836',
'836,836,836,836,,,,,,,,,,836,,,836,836,836,836,836,836,836,836,836,836',
',836,836,,836,836,836,,,,,,,,,,,,,,,,,,,,836,,,836,,,836,836,,836,,836',
',836,,836,,,,,,,,836,,,,,836,836,836,836,836,836,,,,836,836,405,405',
'405,,405,,,,405,405,,,,405,,405,405,405,405,405,405,405,,,,,405,405',
'405,405,405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405,405,405,405',
'405,,405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405,,405',
',,,,,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405,405,154,154,154',
',154,,,,154,154,,,,154,,154,154,154,154,154,154,154,,,,,154,154,154',
'154,154,154,154,,,,,,,,,,154,,,154,154,154,154,154,154,154,154,154,154',
',154,154,,,,154,,,,,,,,,,,,,,,,,,,,154,,,154,,,154,154,,154,,,,,,,,',
',,,,,,,,,,154,154,154,154,154,154,,,,154,154,155,155,155,,155,,,,155',
'155,,,,155,,155,155,155,155,155,155,155,,,,,155,155,155,155,155,155',
'155,,,,,,,,,,155,,,155,155,155,155,155,155,155,155,155,155,,155,155',
',155,155,155,,,,,,,,,,,,,,,,,,,,155,,,155,,,155,155,,155,,,,,,155,,',
',,,,,155,,,,,155,155,155,155,155,155,,,,155,155,574,574,574,,574,,,',
'574,574,,,,574,,574,574,574,574,574,574,574,,,,,574,574,574,574,574',
'574,574,,,,,,,,,,574,,,574,574,574,574,574,574,574,574,574,574,,574',
'574,,574,574,574,,,,,,,,,,,,,,,,,,,,574,,,574,,,574,574,,574,,,,,,574',
',,,,,,,574,,,,,574,574,574,574,574,574,,,,574,574,403,403,403,,403,',
',,403,403,,,,403,,403,403,403,403,403,403,403,,,,,403,403,403,403,403',
'403,403,,,,,,,,,,403,,,403,403,403,403,403,403,403,403,403,403,,403',
'403,,403,403,403,,,,,,,,,,,,,,,,,,,,403,,,403,,,403,403,,403,,403,,403',
',403,,,,,,,,403,,,,,403,403,403,403,403,403,,,,403,403,401,401,401,',
'401,,,,401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401,401,401',
'401,401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401,401,',
'401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,401,,,',
',,401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,666,666,666',
',666,,,,666,666,,,,666,,666,666,666,666,666,666,666,,,,,666,666,666',
'666,666,666,666,,,,,,,,,,666,,,666,666,666,666,666,666,666,666,666,666',
',666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666,,,666,666,,666,,',
',,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666,666,566,566,566',
',566,,,,566,566,,,,566,,566,566,566,566,566,566,566,,,,,566,566,566',
'566,566,566,566,,,,,,,,,,566,,,566,566,566,566,566,566,566,566,566,566',
',566,566,,,,566,,,,,,,,,,,,,,,,,,,,566,,,566,,,566,566,,566,,566,,,',
',,,,,,,566,,,,,,566,566,566,566,566,566,,,,566,566,828,828,828,,828',
',,,828,828,,,,828,,828,828,828,828,828,828,828,,,,,828,828,828,828,828',
'828,828,,,,,,,,,,828,,,828,828,828,828,828,828,828,828,828,828,,828',
'828,,828,828,828,,,,,,,,,,,,,,,,,,,,828,,,828,,,828,828,,828,,828,,',
',828,,,,,,,,828,,,,,828,828,828,828,828,828,,,,828,828,658,658,658,',
'658,,,,658,658,,,,658,,658,658,658,658,658,658,658,,,,,658,658,658,658',
'658,658,658,,,,,,,,,,658,,,658,658,658,658,658,658,658,658,658,658,',
'658,658,,658,658,658,,,,,,,,,,,,,,,,,,,,658,,,658,,,658,658,,658,,658',
',658,,658,,,,,,,,658,,,,,658,658,658,658,658,658,,,,658,658,164,164',
'164,,164,,,,164,164,,,,164,,164,164,164,164,164,164,164,,,,,164,164',
'164,164,164,164,164,,,,,,,,,,164,,,164,164,164,164,164,164,164,164,164',
'164,,164,164,,,,164,,,,,,,,,,,,,,,,,,,,164,,,164,,,164,164,,164,,,,',
',,,,,,,,,,,,,,164,164,164,164,164,164,,,,164,164,165,165,165,,165,,',
',165,165,,,,165,,165,165,165,165,165,165,165,,,,,165,165,165,165,165',
'165,165,,,,,,,,,,165,,,165,165,165,165,165,165,165,165,165,165,,165',
'165,,,,165,,,,,,,,,,,,,,,,,,,,165,,,165,,,165,165,,165,,,,,,,,,,,,,',
',,,,,165,165,165,165,165,165,,,,165,165,562,562,562,,562,,,,562,562',
',,,562,,562,562,562,562,562,562,562,,,,,562,562,562,562,562,562,562',
',,562,,,,,,,562,,,562,562,562,562,562,562,562,562,562,562,,562,562,',
'562,562,562,,,,,,,,,,,,,,,,,,,,562,,,562,,,562,562,,562,,,,,,562,,,',
',,,,562,,,,,562,562,562,562,562,562,,,,562,562,14,14,14,14,14,,,,14',
'14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14,14,14,14,14,,,14,,,,,,14',
'14,14,14,14,14,14,14,14,14,14,14,14,14,,14,14,,14,14,14,,,,,,,,,,,,',
',,,,,,,14,,,14,,,14,14,,14,,14,,,,14,,,,,,,,14,,,,,14,14,14,14,14,14',
',,,14,14,399,399,399,,399,,,,399,399,,,,399,,399,399,399,399,399,399',
'399,,,,,399,399,399,399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399',
'399,399,399,399,399,,399,399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399',
',,399,399,,399,,,,,,399,,,,,,,,399,,,,,399,399,399,399,399,399,,,,399',
'399,398,398,398,,398,,,,398,398,,,,398,,398,398,398,398,398,398,398',
',,,,398,398,398,398,398,398,398,,,,,,,,,,398,,,398,398,398,398,398,398',
'398,398,398,398,,398,398,,398,398,398,,,,,,,,,,,,,,,,,,,,398,,,398,',
',398,398,,398,,,,,,398,,,,,,,,398,,,,,398,398,398,398,398,398,,,,398',
'398,396,396,396,,396,,,,396,396,,,,396,,396,396,396,396,396,396,396',
',,,,396,396,396,396,396,396,396,,,,,,,,,,396,,,396,396,396,396,396,396',
'396,396,396,396,,396,396,,396,396,396,,,,,,,,,,,,,,,,,,,,396,,,396,',
',396,396,,396,,396,,,,396,,,,,,,,396,,,,,396,396,396,396,396,396,,,',
'396,396,389,389,389,,389,,,,389,389,,,,389,,389,389,389,389,389,389',
'389,,,,,389,389,389,389,389,389,389,,,389,,,,,,,389,,,389,389,389,389',
'389,389,389,389,389,389,,389,389,,389,389,389,,,,,,,,,,,,,,,,,,,,389',
',,389,,,389,389,,389,,389,,389,,389,,,,,,,,389,,,,,389,389,389,389,389',
'389,,,,389,389,513,513,513,,513,,,,513,513,,,,513,,513,513,513,513,513',
'513,513,,,,,513,513,513,513,513,513,513,,,,,,,,,,513,,,513,513,513,513',
'513,513,513,513,513,513,,513,513,,513,513,513,,,,,,,,,,,,,,,,,,,,513',
',,513,,,513,513,,513,,513,,,,513,,,,,,,,513,,,,,513,513,513,513,513',
'513,,,,513,513,704,704,704,,704,,,,704,704,,,,704,,704,704,704,704,704',
'704,704,,,,,704,704,704,704,704,704,704,,,,,,,,,,704,,,704,704,704,704',
'704,704,704,704,704,704,,704,704,,704,704,704,,,,,,,,,,,,,,,,,,,,704',
',,704,,,704,704,,704,,704,,704,,704,,,,,,,,704,,,,,704,704,704,704,704',
'704,,,,704,704,553,553,553,,553,,,,553,553,,,,553,,553,553,553,553,553',
'553,553,,,,,553,553,553,553,553,553,553,,,,,,,,,,553,,,553,553,553,553',
'553,553,553,553,553,553,,553,553,,553,553,553,,,,,,,,,,,,,,,,,,,,553',
',,553,,,553,553,,553,,,,,,553,,,,,,,,553,,,,,553,553,553,553,553,553',
',,,553,553,552,552,552,,552,,,,552,552,,,,552,,552,552,552,552,552,552',
'552,,,,,552,552,552,552,552,552,552,,,,,,,,,,552,,,552,552,552,552,552',
'552,552,552,552,552,,552,552,,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552',
',,552,552,,552,,,,,,552,,,,,,,,552,,,,,552,552,552,552,552,552,,,,552',
'552,516,516,516,,516,,,,516,516,,,,516,,516,516,516,516,516,516,516',
',,,,516,516,516,516,516,516,516,,,,,,,,,,516,,,516,516,516,516,516,516',
'516,516,516,516,,516,516,,516,516,516,,,,,,,,,,,,,,,,,,,,516,,,516,',
',516,516,,516,,,,,,516,,,,,,,,516,,,,,516,516,516,516,516,516,,,,516',
'516,376,376,376,,376,,,,376,376,,,,376,,376,376,376,376,376,376,376',
',,,,376,376,376,376,376,376,376,,,,,,,,,,376,,,376,376,376,376,376,376',
'376,376,376,376,,376,376,,376,376,376,,,,,,,,,,,,,,,,,,,,376,,,376,',
',376,376,,376,,376,,,,376,,,,,,,,376,,,,,376,376,376,376,376,376,,,',
'376,376,17,17,17,,17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17',
'17,17,17,17,17,,,,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17',
'17,17,,,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,17,,17,,17,,17,,,,,,,,17,',
',,,17,17,17,17,17,17,,,,17,17,261,261,261,,261,,,,261,261,,,,261,,261',
'261,261,261,261,261,261,,,,,261,261,261,261,261,261,261,,,261,,,,,,',
'261,,,261,261,261,261,261,261,261,261,261,261,,261,261,,261,261,261',
',,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261,,,,,,261,,,,,,,,261,,,,',
'261,261,261,261,261,261,,,,261,261,262,262,262,,262,,,,262,262,,,,262',
',262,262,262,262,262,262,262,,,,,262,262,262,262,262,262,262,,,262,',
',,,,,262,,,262,262,262,262,262,262,262,262,262,262,,262,262,,262,262',
'262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,262,,,,,,262,,,,,,,,262',
',,,,262,262,262,262,262,262,,,,262,262,714,714,714,,714,,,,714,714,',
',,714,,714,714,714,714,714,714,714,,,,,714,714,714,714,714,714,714,',
',,,,,,,,714,,,714,714,714,714,714,714,714,714,714,714,,714,714,,714',
'714,714,,,,,,,,,,,,,,,,,,,,714,,,714,,,714,714,,714,,714,,714,,714,',
',,,,,,714,,,,,714,714,714,714,714,714,,,,714,714,817,817,817,,817,,',
',817,817,,,,817,,817,817,817,817,817,817,817,,,,,817,817,817,817,817',
'817,817,,,,,,,,,,817,,,817,817,817,817,817,817,817,817,817,817,,817',
'817,,,,817,,,,,,,,,,,,,,,,,,,,817,,,817,,,817,817,,817,,,,,,,,,,,,,',
',,,,,817,817,817,817,817,817,,,,817,817,31,31,31,31,31,31,31,31,,,31',
'31,31,31,31,,,31,31,31,31,31,31,31,,,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,,,31,,,,,,,,31,31,,31,31,31,31,',
'31,31,,,31,,,,,31,31,31,31,,,,,,,,,,,,,31,31,,31,31,31,31,31,31,31,31',
'31,,31,,,31,31,,,267,267,267,,267,,,31,267,267,,,,267,,267,267,267,267',
'267,267,267,,,,,267,267,267,267,267,267,267,,,,,,,,,,267,,,267,267,267',
'267,267,267,267,267,267,267,,267,267,,,,267,,,,,,,,,,,,,,,,,,,,267,',
',267,267,,267,267,,267,,,,,,,,,,,,,,,,,,,267,267,267,267,267,267,,,',
'267,267,30,30,30,,30,,,,30,30,,,,30,,30,30,30,30,30,30,30,,,,,30,30',
'30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30,30,30,30,,30,30,,30',
'30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,30,,,,,,30,,,,,,,,30,,,,,30',
'30,30,30,30,30,,,,30,30,707,707,707,,707,,,,707,707,,,,707,,707,707',
'707,707,707,707,707,,,,,707,707,707,707,707,707,707,,,,,,,,,,707,,,707',
'707,707,707,707,707,707,707,707,707,,707,707,,707,707,707,,,,,,,,,,',
',,,,,,,,,707,,,707,,,707,707,,707,,707,,707,,707,,,,,,,,707,,,,,707',
'707,707,707,707,707,,,,707,707,29,29,29,29,29,29,29,29,,,29,29,29,29',
'29,,,29,29,29,29,29,29,29,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,29,29,,29,,,,,,,,29,29,,29,29,29,29,,29,29,',
',29,,,,,29,29,29,29,,,,,,,,,,,,,29,29,,29,29,29,29,29,29,29,29,29,,29',
',,29,29,,,276,276,276,,276,,,29,276,276,,,,276,,276,276,276,276,276',
'276,276,,,,,276,276,276,276,276,276,276,,,,,,,,,,276,,,276,276,276,276',
'276,276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276',
',,276,,,276,276,,276,,,,,,276,,,,,,,,276,,,,,276,276,276,276,276,276',
',,,276,276,277,277,277,,277,,,,277,277,,,,277,,277,277,277,277,277,277',
'277,,,,,277,277,277,277,277,277,277,,,,,,,,,,277,,,277,277,277,277,277',
'277,277,277,277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277',
',,277,277,,277,,,,,,277,,,,,,,,277,,,,,277,277,277,277,277,277,,,,277',
'277,278,278,278,,278,,,,278,278,,,,278,,278,278,278,278,278,278,278',
',,,,278,278,278,278,278,278,278,,,,,,,,,,278,,,278,278,278,278,278,278',
'278,278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,',
',278,278,,278,,,,,,278,,,,,,,,278,,,,,278,278,278,278,278,278,,,,278',
'278,279,279,279,,279,,,,279,279,,,,279,,279,279,279,279,279,279,279',
',,,,279,279,279,279,279,279,279,,,,,,,,,,279,,,279,279,279,279,279,279',
'279,279,279,279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,',
',279,279,,279,,,,,,279,,,,,,,,279,,,,,279,279,279,279,279,279,,,,279',
'279,280,280,280,,280,,,,280,280,,,,280,,280,280,280,280,280,280,280',
',,,,280,280,280,280,280,280,280,,,,,,,,,,280,,,280,280,280,280,280,280',
'280,280,280,280,,280,280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,',
',280,280,,280,,,,,,280,,,,,,,,280,,,,,280,280,280,280,280,280,,,,280',
'280,281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281,281,281',
',,,,281,281,281,281,281,281,281,,,,,,,,,,281,,,281,281,281,281,281,281',
'281,281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281,',
',281,281,,281,,,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,,,,281',
'281,282,282,282,,282,,,,282,282,,,,282,,282,282,282,282,282,282,282',
',,,,282,282,282,282,282,282,282,,,,,,,,,,282,,,282,282,282,282,282,282',
'282,282,282,282,,282,282,,282,282,282,,,,,,,,,,,,,,,,,,,,282,,,282,',
',282,282,,282,,,,,,282,,,,,,,,282,,,,,282,282,282,282,282,282,,,,282',
'282,283,283,283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283',
',,,,283,283,283,283,283,283,283,,,,,,,,,,283,,,283,283,283,283,283,283',
'283,283,283,283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,',
',283,283,,283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,,,,283',
'283,284,284,284,,284,,,,284,284,,,,284,,284,284,284,284,284,284,284',
',,,,284,284,284,284,284,284,284,,,,,,,,,,284,,,284,284,284,284,284,284',
'284,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284,,,284,',
',284,284,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284,,,,284',
'284,285,285,285,,285,,,,285,285,,,,285,,285,285,285,285,285,285,285',
',,,,285,285,285,285,285,285,285,,,,,,,,,,285,,,285,285,285,285,285,285',
'285,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,',
',285,285,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,,,,285',
'285,286,286,286,,286,,,,286,286,,,,286,,286,286,286,286,286,286,286',
',,,,286,286,286,286,286,286,286,,,,,,,,,,286,,,286,286,286,286,286,286',
'286,286,286,286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,',
',286,286,,286,,,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,,,,286',
'286,287,287,287,,287,,,,287,287,,,,287,,287,287,287,287,287,287,287',
',,,,287,287,287,287,287,287,287,,,,,,,,,,287,,,287,287,287,287,287,287',
'287,287,287,287,,287,287,,287,287,287,,,,,,,,,,,,,,,,,,,,287,,,287,',
',287,287,,287,,,,,,287,,,,,,,,287,,,,,287,287,287,287,287,287,,,,287',
'287,288,288,288,,288,,,,288,288,,,,288,,288,288,288,288,288,288,288',
',,,,288,288,288,288,288,288,288,,,,,,,,,,288,,,288,288,288,288,288,288',
'288,288,288,288,,288,288,,288,288,288,,,,,,,,,,,,,,,,,,,,288,,,288,',
',288,288,,288,,,,,,288,,,,,,,,288,,,,,288,288,288,288,288,288,,,,288',
'288,289,289,289,,289,,,,289,289,,,,289,,289,289,289,289,289,289,289',
',,,,289,289,289,289,289,289,289,,,,,,,,,,289,,,289,289,289,289,289,289',
'289,289,289,289,,289,289,,289,289,289,,,,,,,,,,,,,,,,,,,,289,,,289,',
',289,289,,289,,,,,,289,,,,,,,,289,,,,,289,289,289,289,289,289,,,,289',
'289,290,290,290,,290,,,,290,290,,,,290,,290,290,290,290,290,290,290',
',,,,290,290,290,290,290,290,290,,,,,,,,,,290,,,290,290,290,290,290,290',
'290,290,290,290,,290,290,,290,290,290,,,,,,,,,,,,,,,,,,,,290,,,290,',
',290,290,,290,,,,,,290,,,,,,,,290,,,,,290,290,290,290,290,290,,,,290',
'290,291,291,291,,291,,,,291,291,,,,291,,291,291,291,291,291,291,291',
',,,,291,291,291,291,291,291,291,,,,,,,,,,291,,,291,291,291,291,291,291',
'291,291,291,291,,291,291,,291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,',
',291,291,,291,,,,,,291,,,,,,,,291,,,,,291,291,291,291,291,291,,,,291',
'291,292,292,292,,292,,,,292,292,,,,292,,292,292,292,292,292,292,292',
',,,,292,292,292,292,292,292,292,,,,,,,,,,292,,,292,292,292,292,292,292',
'292,292,292,292,,292,292,,292,292,292,,,,,,,,,,,,,,,,,,,,292,,,292,',
',292,292,,292,,,,,,292,,,,,,,,292,,,,,292,292,292,292,292,292,,,,292',
'292,293,293,293,,293,,,,293,293,,,,293,,293,293,293,293,293,293,293',
',,,,293,293,293,293,293,293,293,,,,,,,,,,293,,,293,293,293,293,293,293',
'293,293,293,293,,293,293,,293,293,293,,,,,,,,,,,,,,,,,,,,293,,,293,',
',293,293,,293,,,,,,293,,,,,,,,293,,,,,293,293,293,293,293,293,,,,293',
'293,294,294,294,,294,,,,294,294,,,,294,,294,294,294,294,294,294,294',
',,,,294,294,294,294,294,294,294,,,,,,,,,,294,,,294,294,294,294,294,294',
'294,294,294,294,,294,294,,294,294,294,,,,,,,,,,,,,,,,,,,,294,,,294,',
',294,294,,294,,,,,,294,,,,,,,,294,,,,,294,294,294,294,294,294,,,,294',
'294,295,295,295,,295,,,,295,295,,,,295,,295,295,295,295,295,295,295',
',,,,295,295,295,295,295,295,295,,,,,,,,,,295,,,295,295,295,295,295,295',
'295,295,295,295,,295,295,,295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,',
',295,295,,295,,,,,,295,,,,,,,,295,,,,,295,295,295,295,295,295,,,,295',
'295,296,296,296,,296,,,,296,296,,,,296,,296,296,296,296,296,296,296',
',,,,296,296,296,296,296,296,296,,,,,,,,,,296,,,296,296,296,296,296,296',
'296,296,296,296,,296,296,,296,296,296,,,,,,,,,,,,,,,,,,,,296,,,296,',
',296,296,,296,,,,,,296,,,,,,,,296,,,,,296,296,296,296,296,296,,,,296',
'296,297,297,297,,297,,,,297,297,,,,297,,297,297,297,297,297,297,297',
',,,,297,297,297,297,297,297,297,,,,,,,,,,297,,,297,297,297,297,297,297',
'297,297,297,297,,297,297,,297,297,297,,,,,,,,,,,,,,,,,,,,297,,,297,',
',297,297,,297,,,,,,297,,,,,,,,297,,,,,297,297,297,297,297,297,,,,297',
'297,298,298,298,,298,,,,298,298,,,,298,,298,298,298,298,298,298,298',
',,,,298,298,298,298,298,298,298,,,,,,,,,,298,,,298,298,298,298,298,298',
'298,298,298,298,,298,298,,298,298,298,,,,,,,,,,,,,,,,,,,,298,,,298,',
',298,298,,298,,,,,,298,,,,,,,,298,,,,,298,298,298,298,298,298,,,,298',
'298,299,299,299,,299,,,,299,299,,,,299,,299,299,299,299,299,299,299',
',,,,299,299,299,299,299,299,299,,,,,,,,,,299,,,299,299,299,299,299,299',
'299,299,299,299,,299,299,,299,299,299,,,,,,,,,,,,,,,,,,,,299,,,299,',
',299,299,,299,,,,,,299,,,,,,,,299,,,,,299,299,299,299,299,299,,,,299',
'299,300,300,300,,300,,,,300,300,,,,300,,300,300,300,300,300,300,300',
',,,,300,300,300,300,300,300,300,,,,,,,,,,300,,,300,300,300,300,300,300',
'300,300,300,300,,300,300,,300,300,300,,,,,,,,,,,,,,,,,,,,300,,,300,',
',300,300,,300,,,,,,300,,,,,,,,300,,,,,300,300,300,300,300,300,,,,300',
'300,301,301,301,,301,,,,301,301,,,,301,,301,301,301,301,301,301,301',
',,,,301,301,301,301,301,301,301,,,,,,,,,,301,,,301,301,301,301,301,301',
'301,301,301,301,,301,301,,301,301,301,,,,,,,,,,,,,,,,,,,,301,,,301,',
',301,301,,301,,,,,,301,,,,,,,,301,,,,,301,301,301,301,301,301,,,,301',
'301,368,368,368,,368,,,,368,368,,,,368,,368,368,368,368,368,368,368',
',,,,368,368,368,368,368,368,368,,,,,,,,,,368,,,368,368,368,368,368,368',
'368,368,368,368,,368,368,,368,368,368,,,,,,,,,,,,,,,,,,,,368,,,368,368',
',368,368,,368,,368,,368,,368,,,,,,,,368,,,,,368,368,368,368,368,368',
',,,368,368,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,61',
'61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,,61,61',
',61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,61,,,,,,61,,,,,,,,61,',
',,,61,61,61,61,61,61,,,,61,61,365,365,365,,365,,,,365,365,,,,365,,365',
'365,365,365,365,365,365,,,,,365,365,365,365,365,365,365,,,,,,,,,,365',
',,365,365,365,365,365,365,365,365,365,365,,365,365,,365,365,365,,,,',
',,,,,,,,,,,,,,,365,,,365,365,,365,365,,365,,365,,365,,365,,,,,,,,365',
',,,,365,365,365,365,365,365,,,,365,365,546,546,546,,546,,,,546,546,',
',,546,,546,546,546,546,546,546,546,,,,,546,546,546,546,546,546,546,',
',,,,,,,,546,,,546,546,546,546,546,546,546,546,546,546,,546,546,,546',
'546,546,,,,,,,,,,,,,,,,,,,,546,,,546,,,546,546,,546,,,,,,546,,,,,,,',
'546,,,,,546,546,546,546,546,546,,,,546,546,709,709,709,,709,,,,709,709',
',,,709,,709,709,709,709,709,709,709,,,,,709,709,709,709,709,709,709',
',,,,,,,,,709,,,709,709,709,709,709,709,709,709,709,709,,709,709,,709',
'709,709,,,,,,,,,,,,,,,,,,,,709,,,709,,,709,709,,709,,,,,,709,,,,,,,',
'709,,,,,709,709,709,709,709,709,,,,709,709,794,794,794,,794,,,,794,794',
',,,794,,794,794,794,794,794,794,794,,,,,794,794,794,794,794,794,794',
',,,,,,,,,794,,,794,794,794,794,794,794,794,794,794,794,,794,794,,794',
'794,794,,,,,,,,,,,,,,,,,,,,794,,,794,,,794,794,,794,,,,,,794,,,,,,,',
'794,,,,,794,794,794,794,794,794,,,,794,794,25,25,25,,25,,,,25,25,,,',
'25,,25,25,25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,,,,,25,,,25,25',
'25,25,25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,,,,,,,,25,,,25',
',,25,25,,25,,,,,,25,,,,,,,,25,,,,,25,25,25,25,25,25,,,,25,25,313,313',
'313,,313,,,,313,313,,,,313,,313,313,313,313,313,313,313,,,,,313,313',
'313,313,313,313,313,,,,,,,,,,313,,,313,313,313,313,313,313,313,313,313',
'313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,,313,313,313',
',313,,313,,313,,313,,,,,,,,313,,,,,313,313,313,313,313,313,,,,313,313',
'314,314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314,314,,,,',
'314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314,314,314',
'314,314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314,,,314,',
',314,314,,314,,,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314,,,,314',
'314,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315,315',
',,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315,315',
'315,315,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315,,,315',
',,315,315,,315,,,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315,,,,315',
'315,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316,316,316',
',,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316,316,316',
'316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316,,,316',
',,316,316,,316,,,,,,316,,,,,,,,316,,,,,316,316,316,316,316,316,,,,316',
'316,317,317,317,,317,,,,317,317,,,,317,,317,317,317,317,317,317,317',
',,,,317,317,317,317,317,317,317,,,317,,,,,,,317,,,317,317,317,317,317',
'317,317,317,317,317,,317,317,,317,317,317,,,,,,,,,,,,,,,,,,,,317,,,317',
',,317,317,,317,,,,,,317,,,,,,,,317,,,,,317,317,317,317,317,317,,,,317',
'317,318,318,318,318,318,,,,318,318,,,,318,,318,318,318,318,318,318,318',
',,,,318,318,318,318,318,318,318,,,318,,,,,,318,318,318,318,318,318,318',
'318,318,318,318,318,318,318,,318,318,,318,318,318,,,,,,,,,,,,,,,,,,',
',318,,,318,,,318,318,,318,,318,,,,318,,,,,,,,318,,,,,318,318,318,318',
'318,318,,,,318,318,321,321,321,,321,,,,321,321,,,,321,,321,321,321,321',
'321,321,321,,,,,321,321,321,321,321,321,321,,,,,,,,,,321,,,321,321,321',
'321,321,321,321,321,321,321,,321,321,,321,321,321,,,,,,,,,,,,,,,,,,',
',321,,,321,,,321,321,,321,,321,,321,,321,,,,,,,,321,,,,,321,321,321',
'321,321,321,,,,321,321,635,635,635,635,635,635,635,635,,,635,635,635',
'635,635,,,635,635,635,635,635,635,635,,,635,635,635,635,635,635,635',
'635,635,635,635,635,635,635,635,635,635,635,635,635,635,635,635,,,635',
',,,,,,,635,635,,635,635,635,635,,635,635,,,635,,,,,635,635,635,635,',
',,,,,,,,,,,635,635,,635,635,635,635,635,635,635,635,635,,635,,,635,635',
',,363,363,363,,363,,,635,363,363,,,,363,,363,363,363,363,363,363,363',
',,,,363,363,363,363,363,363,363,,,,,,,,,,363,,,363,363,363,363,363,363',
'363,363,363,363,,363,363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,363',
',363,363,,363,,363,,363,,363,,,,,,,,363,,,,,363,363,363,363,363,363',
',,,363,363,522,522,522,,522,,,,522,522,,,,522,,522,522,522,522,522,522',
'522,,,,,522,522,522,522,522,522,522,,,,,,,,,,522,,,522,522,522,522,522',
'522,522,522,522,522,,522,522,,522,522,522,,,,,,,,,,,,,,,,,,,,522,,,522',
',,522,522,,522,,,,,,522,,,,,,,,522,,,,,522,522,522,522,522,522,,,,522',
'522,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354,354',
',,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354',
'354,354,354,354,354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354',
',,354,354,,354,,,,,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354',
'354,792,792,792,,792,,,,792,792,,,,792,,792,792,792,792,792,792,792',
',,,,792,792,792,792,792,792,792,,,,,,,,,,792,,,792,792,792,792,792,792',
'792,792,792,792,,792,792,,792,792,792,,,,,,,,,,,,,,,,,,,,792,,,792,',
',792,792,,792,,,,,,792,,,,,,,,792,,,,,792,792,792,792,792,792,,,,792',
'792,791,791,791,,791,,,,791,791,,,,791,,791,791,791,791,791,791,791',
',,,,791,791,791,791,791,791,791,,,,,,,,,,791,,,791,791,791,791,791,791',
'791,791,791,791,,791,791,,791,791,791,,,,,,,,,,,,,,,,,,,,791,,,791,',
',791,791,,791,,,,,,791,,,,,,,,791,,,,,791,791,791,791,791,791,,,,791',
'791,353,353,353,,353,,,,353,353,,,,353,,353,353,353,353,353,353,353',
',,,,353,353,353,353,353,353,353,,,,,,,,,,353,,,353,353,353,353,353,353',
'353,353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353,',
',353,353,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353',
'353,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332,332,332',
',,,,332,332,332,332,332,332,332,,,,,,,,,,332,,,332,332,332,332,332,332',
'332,332,332,332,,332,332,,332,332,332,,,,,,,,,,,,,,,,,,,,332,,,332,',
',332,332,,332,,,,,,332,,,,,,,,332,,,,,332,332,332,332,332,332,,,,332',
'332,351,351,351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351',
',,,,351,351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351',
'351,351,351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351',
',,351,351,,351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351',
'351,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334,334',
',,,,334,334,334,334,334,334,334,,,,,,,,,,334,,,334,334,334,334,334,334',
'334,334,334,334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334,',
',334,334,,334,,334,,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,,',
'334,334,710,710,710,,710,,,,710,710,,,,710,,710,710,710,710,710,710',
'710,,,,,710,710,710,710,710,710,710,,,,,,,,,,710,,,710,710,710,710,710',
'710,710,710,710,710,,710,710,,710,710,710,,,,,,,,,,,,,,,,,,,,710,,,710',
',,710,710,,710,,,,,,710,,,,,,,,710,,,,,710,710,710,710,710,710,,,,710',
'710,788,788,788,,788,,,,788,788,,,,788,,788,788,788,788,788,788,788',
',,,,788,788,788,788,788,788,788,,,,,,,,,,788,,,788,788,788,788,788,788',
'788,788,788,788,,788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,',
',788,788,,788,,,,,,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788',
'788,529,529,529,,529,,,,529,529,,,,529,,529,529,529,529,529,529,529',
',,,,529,529,529,529,529,529,529,,,,,,,,,,529,,,529,529,529,529,529,529',
'529,529,529,529,,529,529,,529,529,529,,,,,,,,,,,,,,,,,,,,529,,,529,',
',529,529,,529,,,,,,529,,,,,,,,529,,,,,529,529,529,529,529,529,,,,529',
'529,350,350,350,,350,,,,350,350,,,,350,,350,350,350,350,350,350,350',
',,,,350,350,350,350,350,350,350,,,,,,,,,,350,,,350,350,350,350,350,350',
'350,350,350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,',
',350,350,,350,,350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,',
'350,350,711,711,711,,711,,,,711,711,,,,711,,711,711,711,711,711,711',
'711,,,,,711,711,711,711,711,711,711,,,,,,,,,,711,,,711,711,711,711,711',
'711,711,711,711,711,,711,711,,711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711',
',,711,711,,711,,,,,,711,,,,,,,,711,,,,,711,711,711,711,711,711,,,,711',
'711,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21',
'21,21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21,,21,21,,,,21,,',
',,,,,,,,,,,,,,,,,21,,,21,,,21,21,,21,,21,,,,,,,,,,,,,,,,,21,21,21,21',
'21,21,,,,21,21,868,868,868,,868,,,,868,868,,,,868,,868,868,868,868,868',
'868,868,,,,,868,868,868,868,868,868,868,,,,,,,,,,868,,,868,868,868,868',
'868,868,868,868,868,868,,868,868,,868,868,868,,,,,,,,,,,,,,,,,,,,868',
',,868,,,868,868,,868,,,,,,868,,,,,,,,868,,,,,868,868,868,868,868,868',
',,,868,868,257,257,257,257,257,257,257,257,,,257,257,257,257,257,,,257',
'257,257,257,257,257,257,,,257,257,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,,,,',
',,257,257,,257,257,257,257,,257,257,,,257,,,,,257,257,257,257,,,,,,',
',,,,,,257,257,,257,257,257,257,257,257,257,257,257,,257,,,257,84,84',
'84,84,84,84,84,84,,,84,84,84,84,84,,,84,84,84,84,84,84,84,,,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84',
'84,,,,,,,84,84,,84,84,84,84,,84,84,,,84,,,,,84,84,84,84,,,,,,,,,,,,',
'84,84,,84,84,84,84,84,84,84,84,84,,84,,,84,613,613,613,613,613,613,613',
'613,,,613,613,613,613,613,,,613,613,613,613,613,613,613,,,613,613,613',
'613,613,613,613,613,613,613,613,613,613,613,613,613,613,613,613,613',
'613,613,613,,,613,,,,,,,,613,613,,613,613,613,613,,613,613,,,613,,,',
',613,613,613,613,,,,,,,,,,,,,613,613,,613,613,613,613,613,613,613,613',
'613,,613,,,613,26,26,26,26,26,26,26,26,,,26,26,26,26,26,,,26,26,26,26',
'26,26,26,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,,,,,,,26,26,,26,26,26,26,,26,26,,,26,,,,,26',
'26,26,26,,,,,,26,,584,,,,,26,26,,26,26,26,26,26,26,26,26,26,,26,,,26',
'584,584,584,584,584,584,584,584,584,584,584,,584,584,,,584,584,,,,,',
',,,,,,,,584,,584,,584,584,584,584,584,584,584,,584,842,842,842,842,842',
'842,842,842,842,842,842,,842,842,,584,842,842,,,,,,,,,,,,,,842,,842',
',842,842,842,842,842,842,842,,842,,,,,,,,,,,,,,,,842,,842,573,573,573',
'573,573,573,573,573,573,573,573,,573,573,,,573,573,,,,573,,,,,,,,,,573',
',573,,573,573,573,573,573,573,573,,573,,,,,,,423,423,,,423,,,,,573,',
'573,423,423,,423,423,423,423,,423,423,,,423,,,,,423,423,423,423,,,,',
',,,,,,,,423,423,,423,423,423,423,423,423,423,423,423,,423,424,424,423',
',424,,,,,,,,424,424,,424,424,424,424,,424,424,,,424,,,,,424,424,424',
'424,,,,,,,,,,,,,424,424,,424,424,424,424,424,424,424,424,424,,424,656',
'656,424,,656,,,,,,,,656,656,,656,656,656,656,,656,656,,,656,,,,,656',
'656,656,656,,,,,,,,,,,,,656,656,,656,656,656,656,656,656,656,656,656',
',656,596,596,656,,596,,,,,,,,596,596,,596,596,596,596,,596,596,,,596',
',,,,596,596,596,596,,,,,,,,,,,,,596,596,,596,596,596,596,596,596,596',
'596,596,,596,597,597,596,,597,,,,,,,,597,597,,597,597,597,597,,597,597',
',,597,,,,,597,597,597,597,,,,,,,,,,,,,597,597,,597,597,597,597,597,597',
'597,597,597,,597,395,395,597,,395,,,,,,,,395,395,,395,395,395,395,,395',
'395,,,395,,,,,395,395,395,395,,,,,,,,,,,,,395,395,,395,395,395,395,395',
'395,395,395,395,,395,394,394,395,,394,,,,,,,,394,394,,394,394,394,394',
',394,394,,,394,,,,,394,394,394,394,,,,,,,,,,,,,394,394,,394,394,394',
'394,394,394,394,394,394,,394,655,655,394,,655,,,,,,,,655,655,,655,655',
'655,655,,655,655,,,655,,,,,655,655,655,655,,,,,,,,,,,,,655,655,,655',
'655,655,655,655,655,655,655,655,,655,375,375,655,,375,,,,,,,,375,375',
',375,375,375,375,,375,375,,,375,,,,,375,375,375,375,,,,,,,,,,,,,375',
'375,,375,375,375,375,375,375,375,375,375,,375,374,374,375,,374,,,,,',
',,374,374,,374,374,374,374,,374,374,,,374,,,,,374,374,374,374,,,,,,',
',,,,,,374,374,,374,374,374,374,374,374,374,374,374,,374,102,102,374',
',102,,,,,,,,102,102,,102,102,102,102,,102,102,,,102,,,,,102,102,102',
'102,,,,,,,,,,,,,102,102,,102,102,102,102,102,102,102,102,102,,102,101',
'101,102,,101,,,,,,,,101,101,,101,101,101,101,,101,101,,,101,,,,,101',
'101,101,101,,,,,,,,,,,,,101,101,,101,101,101,101,101,101,101,101,101',
',101,877,877,101,,877,,,,,,,,877,877,,877,877,877,877,,877,877,,,877',
',,,,877,877,877,877,,,,,,,,,,,,,877,877,,877,877,877,877,877,877,877',
'877,877,,877,878,878,877,,878,,,,,,,,878,878,,878,878,878,878,,878,878',
',,878,,,,,878,878,878,878,,,,,,,,,,,,,878,878,,878,878,878,878,878,878',
'878,878,878,,878,325,325,878,,325,,,,,,,,325,325,,325,325,325,325,,325',
'325,,,325,,,,,325,325,325,325,,,,,,,,,,,,,325,325,,325,325,325,325,325',
'325,325,325,325,,325,326,326,325,,326,,,,,,,,326,326,,326,326,326,326',
',326,326,,,326,,,,,326,326,326,326,,,,,,,,,,,,,326,326,,326,326,326',
'326,326,326,326,326,326,,326,425,425,326,,425,,,,,,,,425,425,,425,425',
'425,425,,425,425,,,425,,,,,425,425,425,425,,,,,,,,,,,,,425,425,,425',
'425,425,425,425,425,425,425,425,,425,641,641,425,,641,,,,,,,,641,641',
',641,641,641,641,,641,641,,,641,,,,,641,641,641,641,,,,,,,,,,,,,641',
'641,,641,641,641,641,641,641,641,641,641,,641,,,641,461,461,461,461',
'461,461,461,461,461,461,461,,461,461,,,461,461,,,,,,,,,,,,,,461,,461',
',461,461,461,461,461,461,461,,461,,766,766,766,766,766,766,766,766,766',
'766,766,,766,766,461,461,766,766,,,,,,,,,,,,,,766,,766,,766,766,766',
'766,766,766,766,,766,420,420,420,420,420,420,420,420,420,420,420,,420',
'420,766,766,420,420,,,,,,,,,,,,,,420,,420,,420,420,420,420,420,420,420',
',420,644,644,644,644,644,644,644,644,644,644,644,,644,644,,420,644,644',
',,,,,,,,,,,,,644,,644,,644,644,644,644,644,644,644,,644,767,767,767',
'767,767,767,767,767,767,767,767,,767,767,,644,767,767,,,,,,,,,,,,,,767',
',767,,767,767,767,767,767,767,767,,767,514,514,514,514,514,514,514,514',
'514,514,514,,514,514,,767,514,514,,,,,,,,,,,,,,514,,514,,514,514,514',
'514,514,514,514,,514,687,687,687,687,687,687,687,687,687,687,687,,687',
'687,514,514,687,687,,,,,,,,,,,,,,687,,687,,687,687,687,687,687,687,687',
',687,539,539,539,539,539,539,539,539,539,539,539,,539,539,,687,539,539',
',,,,,,,,,,,,,539,,539,,539,539,539,539,539,539,539,,539,46,46,46,46',
'46,46,46,46,46,46,46,,46,46,,539,46,46,,,,,,,,,,,,,,46,,46,,46,46,46',
'46,46,46,46,,46,137,137,137,137,137,137,137,137,137,137,137,,137,137',
',46,137,137,,,,,,,,,,,,,,137,,137,,137,137,137,137,137,137,137,,137',
'689,689,689,689,689,689,689,689,689,689,689,,689,689,,137,689,689,,',
',,,,,,,,,,,689,,689,,689,689,689,689,689,689,689,,689,753,753,753,753',
'753,753,753,753,753,753,753,,753,753,,689,753,753,,,,,,,,,,,,,,753,',
'753,,753,753,753,753,753,753,753,,753,693,693,693,693,693,693,693,693',
'693,693,693,,693,693,,753,693,693,,,,,,,,,,,,,,693,,693,,693,693,693',
'693,693,693,693,,693,691,691,691,691,691,691,691,691,691,691,691,,691',
'691,,693,691,691,,,,,,,,,,,,,,691,,691,,691,691,691,691,691,691,691',
',691,778,778,778,778,778,778,778,778,778,778,778,,778,778,,691,778,778',
',,,,,,,,,,,,,778,,778,,778,778,778,778,778,778,778,,778,,,,,,,,,,,,',
',,,778' ]
racc_action_check = arr = Array.new(23926, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

racc_action_pointer = [
   nil,    23,  4341,   945,   nil,   466,  6502,   188,    12,   nil,
   818,  9134,   nil,   nil, 12254,   nil,   810, 13574,   855,   207,
  7694, 21350,   nil,   nil,   809, 18598, 21917,   nil,   nil, 14646,
 14406, 14174,    25,   nil,   nil,   nil,   236,   nil,   554,   810,
   nil,   -87,   335,   874,   nil,   nil, 23538,   815,   nil,   nil,
   893,  9494,   nil,  9374,  3978,   nil,  8174,   nil,   603,  5662,
  4942, 17998,   nil,  4702,   nil,   nil,   496,     0,   nil,   nil,
   nil,   nil,  5062,   nil,   nil,   nil,  5182,   nil,  5302,   289,
   nil,   789,   947,   nil, 21699,   nil,   nil,  5902,   nil,   nil,
   786,   nil,   nil,   nil,   830,   nil,  6262,  6382,   nil,   -39,
   nil, 22784, 22725,  6862,   286,   -21,   nil,   nil,   152,   884,
   356,   126,   784,   851,   nil,   816,   815,   nil,   nil,   nil,
   814,   806,   nil,   nil,  8414,   nil,   nil,   188,   779,   nil,
   159,  8894,    98,   nil,   812,   -74,   843, 23582,   nil,  3494,
   nil,  9734,   nil,   766,   769,   809, 10214,   766,   701,   765,
   -35,   nil,   nil,   nil, 10814, 10934,   399,   nil,   403,   433,
   743,   472,   812,  3010, 11894, 12014,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   368,   nil,
   nil,   nil,   nil,   300,   nil,   nil,   nil,   nil,   192,   nil,
   nil,   nil,   nil,   278,   132,   nil,   nil,   nil,   nil,   302,
   nil,   nil,   nil,   341,   497,   nil,   477,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    59,   nil,   nil,   nil, 21590,   799,   nil,
   729, 13694, 13814,   788,   787,  2405,   nil, 14286,   nil,   nil,
   827,   nil,   nil,   nil,   553,   735, 14758, 14878, 14998, 15118,
 15238, 15358, 15478, 15598, 15718, 15838, 15958, 16078, 16198, 16318,
 16438, 16558, 16678, 16798, 16918, 17038, 17158, 17278, 17398, 17518,
 17638, 17758,  2042,   nil,   nil,   nil,   444,    84,   738,   736,
   735,  1921,   nil, 18718, 18838, 18958, 19078, 19198, 19318,   nil,
   nil, 19438,   nil,   nil,   -11, 22961, 23020,   580,   731,   nil,
   697,   111, 20390,   117, 20630,   388,   689,   -78,   nil,   181,
   nil,   nil,   nil,   nil,   nil,   146,   692,   240,   240,   nil,
 21110, 20510,   221, 20270, 19910,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   711, 19670,   247, 18118,   121,   nil, 17878,   nil,
   -73,   nil,   555,   706, 22666, 22607, 13454,   nil,   nil,   nil,
   709,   -19,   nil,   nil,   nil,    47,   -42,   nil,   nil, 12734,
   175,   nil,   nil,   nil, 22489, 22430, 12614,   nil, 12494, 12374,
   -37, 11294,   nil, 11174,   nil, 10694,   670, 10094,   nil,   nil,
   666,   nil,  9614,   457,   nil,    -3,   nil,    14,   429,   427,
 23274,   nil,   710, 22135, 22194, 23079,  4822,   nil,   471,   698,
   nil,   nil,   nil,   nil,   nil,  6270,  7214,  7102,   nil,   nil,
   nil,   nil,   nil,   nil,  6982,  6742,   777,   773,   376,   725,
  5782,   469,   694,   nil,  8294,  4462,  1437,   703,  1558,  2647,
   702, 23185,  2042,   209,   492,  1679,   576,   602,  1074,  1800,
  1921,  2163,  2284,  2889,  2526,   701,  2405,  3010,  2768,   692,
  1195,  1316,   636,    95,   nil,  2284,   nil,   732,   nil,   612,
   642,   639,   nil,   nil,   nil,   nil,   nil,   nil,   623,   683,
   585,   362,   574,  1316,   487,   nil,   nil,   712,   573,   nil,
   nil,   nil,   nil, 12854, 23406,   nil, 13334,   nil,   nil,   947,
   nil,   565, 19790,  1558,   672,   nil,   661,   nil,   nil, 20990,
   nil,   nil,   nil,   nil,   nil,   537,   nil,    27,   nil, 23494,
   nil,    57,  1800,   618,   566,   nil, 18238,  4582,   525,   nil,
   nil,   nil, 13214, 13094,   357,   514,    21,     7,   503,   154,
   159,   485, 12134,    99,   nil,   nil, 11534,   nil,   nil,   nil,
   nil,   -66,   485, 22070, 11054,   432,   nil,   nil,   377,   602,
   181,   174,   464,   nil, 21964,   nil,   425,  9014,   351,   374,
   nil,   360,   nil,  8654,   nil,   632, 22312, 22371,  7454,   nil,
   nil,   259,    53,   nil,   nil,   nil,   430,   390,   238,   124,
   343,   nil,  3615, 21808,   354,   344,   -98,   208,   141,    90,
   nil,    40,   nil,   nil,   nil,   nil,  2526,   nil,   nil,   nil,
   nil,   nil,   877,   -33,   nil, 19558,    81,    26,    20,  6022,
   nil, 23138,   nil,   371, 23318,   -61,  6142,   nil,   nil,   505,
   nil,   -68,   nil,   nil,   111, 22548, 22253,   192, 11774,   331,
   nil,   nil,   nil,   nil,   297,   nil, 11414,   nil,  9854,  8054,
   nil,   433,   nil,  8774,   444,   nil,   nil,   nil,   nil,   nil,
   347,   nil,   nil,   nil,   nil,   nil,   nil, 23450,   nil, 23626,
   nil, 23758,   nil, 23714,   nil,  9254,    -7,   113,   nil,  2889,
   478,   nil,  2768,   507, 12974,   nil,   482, 14526,   nil, 18358,
 20750, 21230,   -78,   562, 13934,   nil,   568,   455,   nil,   194,
   449,   618,   nil,  7934,  1437,   468,   720,   nil,   nil,   nil,
   nil,   532,   nil,  6622,   471,   nil,   609,   nil,   737,   627,
   667,   nil,  3736,   749,   nil,   673,   nil,   636,   nil,   675,
   677,   nil,   nil, 23670,  3857,  5422,   759,   nil,   nil,   682,
   683,   nil,   746,   488,   772,   nil, 23230, 23362,   660,  7574,
   nil,    20,   668, 10454,   nil,  2163,  1195,   nil, 23802,   nil,
   nil,  1679,   793,   nil,   694,   nil,   nil,   681, 20870,   693,
   nil, 20150, 20030,   nil, 18478,   nil,   nil,   nil,   291,   816,
   nil,  5790,   702,   703,   nil,   nil,   nil,   706,   715,   nil,
   nil,   753,   nil,   nil,   nil,  1074,   nil, 14054,    42,   nil,
   844,    16,   nil,   774,   nil,   nil,   nil,  2647, 11654,   nil,
   857,   858,  3131,   760,   nil,   nil, 10574,   nil,   762, 10334,
   nil,   767, 22008,  3252,   nil,   nil,  3373,   352,   nil,   nil,
   nil,   nil,   nil,   291,   135,   255,   847,   nil,  4099,   nil,
  4220,   nil,   375,  7814,   nil,   nil,   896,   nil, 21470,   782,
   nil,  7334,   nil,   nil,   900,   902,   787, 22843, 22902,  5542,
   337,   915,   634,   nil,   nil,   nil,   nil,   nil,   799,  9974,
   nil,   803,   nil,   nil,   nil,    46,   458,    50,    31,   846,
   nil,   nil,   nil,  8534,   nil,   467,   821,   nil ]

racc_action_default = [
    -1,  -505,  -503,  -505,  -503,  -505,  -505,  -251,  -291,  -419,
  -503,  -322,   -61,    -2,  -505,  -420,  -503,  -323,  -307,  -273,
  -505,   -65,  -314,  -324,  -505,  -505,  -505,  -325,  -379,  -505,
  -505,  -505,   -34,   -71,  -386,  -381,  -505,  -275,  -434,  -494,
  -413,  -382,  -492,  -505,   -20,  -383,   -40,  -505,  -433,    -5,
   -42,  -285,  -432,  -505,  -503,   -43,  -288,  -266,    -6,  -423,
  -356,  -505,  -267,  -505,  -429,  -380,   -47,  -482,  -268,  -428,
  -425,  -269,  -505,  -430,  -424,  -270,  -503,  -431,  -426,  -216,
  -271,  -505,  -492,  -427,  -503,  -272,   -35,  -503,  -436,  -503,
  -505,  -295,  -437,  -503,  -505,  -298,   -70,  -505,   908,  -505,
  -401,  -505,  -505,  -503,  -505,  -350,  -322,  -323,  -273,  -505,
  -505,  -434,  -494,  -505,  -285,  -288,  -356,  -326,  -338,  -339,
  -505,   -53,  -360,  -357,  -505,  -290,  -292,  -505,  -505,  -391,
  -505,  -505,  -273,  -238,  -261,  -434,  -505,  -217,  -230,  -503,
   -45,  -505,  -477,  -505,  -504,  -505,  -505,  -504,    -8,  -505,
  -505,  -397,   -46,  -310,  -505,  -505,  -505,  -209,  -505,   -82,
   -66,   -75,  -505,  -503,   -68,  -505,   -73,  -193,  -168,  -150,
  -121,  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,
  -152,  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,
  -128,  -165,  -118,  -151,  -123,  -434,  -138,  -144,  -119,  -143,
  -125,  -158,  -120,  -134,  -109,  -148,  -115,  -135,  -505,  -317,
  -147,  -160,  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,
  -472,  -162,  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,
  -116,  -146,  -145,  -164,   -97,  -140,  -149,  -131,  -471,  -112,
  -166,  -137,  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,
  -102,    -9,  -154,  -505,  -164,   -97,  -149,  -505,  -194,  -103,
   -14,  -505,  -505,  -421,  -422,  -503,  -495,  -505,  -384,  -500,
  -493,  -499,  -501,    -4,  -281,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -503,  -344,  -347,   -44,   -41,  -505,   -61,  -505,
  -505,  -503,   -60,  -505,  -505,  -505,  -505,  -505,  -505,   -59,
  -355,  -503,  -208,   -39,  -505,  -505,  -505,  -277,  -505,  -218,
  -494,  -496,  -505,  -496,  -505,  -505,  -493,  -492,  -414,  -505,
  -416,  -415,  -417,  -412,  -474,  -496,  -505,  -496,  -505,  -399,
  -505,  -505,  -505,  -505,  -505,   -69,   -38,  -403,  -388,  -406,
  -402,  -404,  -251,  -489,  -483,  -488,  -484,  -354,  -503,  -486,
  -483,  -485,  -484,  -505,  -505,  -505,  -503,  -304,  -421,  -422,
  -505,  -281,  -351,   -54,   -50,  -503,  -503,  -252,  -253,  -254,
  -505,  -393,  -390,  -389,  -505,  -505,  -503,  -258,  -505,  -505,
  -281,  -505,  -260,  -505,  -231,  -505,  -504,  -505,  -233,  -395,
  -505,  -396,  -505,  -505,  -273,  -505,   -94,  -505,   -91,   -92,
  -182,   -30,  -505,  -505,  -505,  -505,  -503,   -74,   -81,  -505,
   -67,  -315,  -491,  -490,  -319,  -452,  -505,  -505,   -13,   -12,
   -11,  -104,   -36,   -37,  -505,  -505,  -371,  -505,  -505,  -505,
  -505,  -214,    -7,  -502,  -505,  -503,  -203,  -189,  -184,  -204,
  -188,  -505,  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,
  -212,  -199,  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,
  -198,  -183,  -505,  -503,  -329,  -503,  -328,  -327,  -279,   -62,
  -505,  -505,  -287,   -15,   -16,   -17,   -18,   -19,  -505,  -230,
  -494,  -494,  -504,  -503,  -251,  -483,  -484,  -251,  -494,  -283,
  -219,  -497,  -220,  -498,  -494,  -222,  -498,   -31,  -261,  -173,
   -23,  -505,  -505,  -503,  -505,  -363,  -505,  -418,  -476,  -498,
  -284,  -475,  -400,  -385,   -33,   -32,   -24,  -505,  -387,  -175,
   -25,  -505,  -503,  -505,   -57,  -353,  -505,  -505,   -55,  -229,
  -352,  -228,  -505,  -505,  -282,  -505,  -487,  -280,  -503,  -483,
  -484,  -505,  -505,  -503,  -361,  -342,  -505,  -340,  -358,  -250,
  -256,  -505,  -505,   -40,  -505,  -504,  -392,  -394,  -487,  -280,
  -483,  -484,  -505,  -479,  -173,  -259,  -262,  -505,  -504,  -505,
  -237,  -505,  -478,  -505,  -398,  -311,  -505,  -505,  -503,   -93,
   -91,   -92,  -505,  -439,  -308,  -438,   -78,   -80,  -483,  -484,
  -505,   -72,  -503,  -505,  -465,  -505,  -505,  -470,  -456,  -470,
  -463,  -470,  -462,  -467,  -454,  -451,  -503,  -466,  -457,  -453,
  -460,  -455,  -452,  -494,   -10,  -505,  -191,  -192,  -503,  -503,
  -276,  -505,  -281,  -326,  -181,  -505,  -505,   -22,  -345,  -503,
  -330,   -62,  -286,  -224,  -505,  -505,  -505,  -505,  -505,  -503,
   -49,  -349,   -48,  -348,  -505,  -262,  -505,  -223,  -505,  -505,
  -265,  -505,  -302,  -505,  -505,  -332,  -296,  -333,  -331,  -299,
  -505,  -411,  -408,  -409,  -405,  -410,   -58,  -179,   -29,  -180,
   -56,  -177,   -27,  -178,   -28,  -505,  -282,  -505,   -51,  -503,
  -505,  -341,  -503,  -505,  -505,  -255,  -504,  -505,  -243,  -505,
  -505,  -505,  -282,  -504,  -505,  -235,  -504,  -505,   -95,   -91,
   -92,  -505,  -441,  -505,  -503,   -76,  -505,  -320,  -464,  -468,
  -443,  -505,  -447,  -505,  -505,  -449,  -505,  -450,  -505,  -494,
  -505,  -105,  -503,  -503,  -336,  -503,  -373,  -372,  -374,  -487,
  -280,  -289,   -21,  -215,  -503,  -505,  -505,  -334,  -225,  -503,
  -503,  -226,  -505,  -494,  -505,  -278,  -494,  -174,  -263,  -505,
  -303,  -505,  -365,  -505,  -301,  -503,  -503,  -407,  -176,   -26,
  -305,  -503,  -505,  -343,  -505,  -257,  -240,  -504,  -505,  -504,
  -249,  -505,  -505,  -232,  -505,  -234,  -312,  -282,  -505,  -505,
  -316,  -452,  -470,  -470,  -469,  -458,  -459,  -505,  -470,  -461,
  -318,  -505,  -473,  -337,    -3,  -503,  -378,  -505,  -505,  -376,
  -505,  -505,  -293,  -505,  -294,  -221,  -264,  -503,  -505,  -367,
  -505,  -505,  -503,  -505,  -362,  -359,  -505,  -239,  -504,  -505,
  -245,  -504,  -504,  -503,  -440,  -309,  -503,  -505,  -445,  -446,
  -448,  -442,  -377,  -505,   -90,   -83,  -505,  -375,  -503,  -346,
  -503,  -227,  -503,  -505,  -297,  -300,  -505,   -52,  -505,  -504,
  -241,  -505,  -244,  -236,  -505,  -505,  -470,  -505,  -505,  -503,
   -89,  -371,  -503,  -369,  -368,  -364,  -366,  -306,  -504,  -505,
  -246,  -504,  -313,  -321,  -444,  -487,   -88,  -483,  -484,  -505,
  -370,  -335,  -242,  -505,  -247,   -84,  -504,  -248 ]

clist = [
'137,250,109,250,138,251,137,259,328,157,138,119,524,209,167,447,638',
'625,626,258,133,267,501,362,368,383,133,320,391,485,272,217,117,147',
'217,373,217,273,308,147,137,517,140,310,138,599,503,117,152,121,322',
'148,732,809,735,803,737,534,808,756,133,564,568,592,661,137,355,663',
'323,330,272,338,743,147,676,417,137,335,679,801,99,238,305,320,346,100',
'431,382,126,217,572,129,137,764,380,387,330,151,312,570,635,160,319',
'604,781,512,363,515,563,347,208,434,265,137,508,351,775,138,354,528',
'137,531,117,776,562,832,154,724,412,717,322,843,165,133,430,137,612',
'435,613,703,483,754,408,386,420,144,147,308,702,385,699,144,429,771',
'885,388,673,329,745,648,339,818,421,268,348,100,809,275,344,352,349',
'876,592,127,100,390,437,307,150,684,117,543,542,723,329,144,739,324',
'802,260,117,117,270,814,805,2,436,1,,,,,,674,,,337,,,,,,,,625,,,,,,',
'345,,,,,718,,,,,,,,780,,,848,849,698,,,,850,338,,,504,507,532,,,,,,',
',,144,,,,217,,,456,457,458,459,460,461,462,463,464,465,466,467,468,469',
'470,471,472,473,474,475,476,477,478,479,480,481,577,901,451,,308,884',
'558,,,490,,137,,,306,138,452,561,,137,894,510,,499,306,362,368,,661',
'663,514,133,519,327,272,,,582,545,133,,526,,306,147,,,,137,,520,539',
'147,491,558,746,558,,356,,,500,,,497,,536,610,763,540,,726,592,,137',
',,,330,592,,,,,,738,,573,363,,,,625,846,137,,420,137,330,584,,137,,539',
',137,,569,363,,590,498,,544,605,,,,250,548,575,,634,,137,,,,330,,,,',
',588,,363,,363,,,,636,637,,,,493,494,495,496,217,644,,,,144,686,551',
',900,690,,,502,,329,,,,,,,,,567,567,521,,,,,,799,537,643,329,541,,,',
'654,657,521,,,,,,664,,,827,,592,667,,,,,,137,,,137,,329,,,,137,,442',
'443,,,,137,558,,,545,,,678,,,,678,721,,,,,687,689,,,883,858,691,693',
'860,,592,660,,,662,,,,688,,,,,,692,694,,700,137,567,,306,306,306,306',
'708,119,,,,,137,759,760,,,,137,715,,551,,137,551,,722,330,117,874,,',
'875,,,,727,363,,306,730,,306,250,,,,741,,,,740,,7,217,,,,,,,,7,,137',
'7,,,7,,,753,,,,551,217,327,,,567,,363,137,,,,762,,,,766,,767,137,,,',
'137,,595,,7,,7,7,,,,,,,7,,7,329,588,,,,778,678,697,7,633,,,7,,137,,',
'137,7,687,691,693,790,779,137,,796,,,793,,,795,7,786,,,,,7,744,748,811',
'137,,,,789,,,,744,,,,,,,,,7,744,,,,,823,,,825,,,,,,7,,,,137,,,,137,',
',,,,,,7,,,521,,,,137,7,,137,778,837,842,840,,844,81,,,,118,,,,,,,,81',
'558,,,,,,,772,,,,899,,,306,,,137,,,,,13,,816,137,819,,137,,,,,870,,',
'872,873,787,81,551,551,,117,,,,798,,,,,137,,,,,137,869,,137,,,,890,',
',,137,,,,330,,309,,7,7,137,821,7,,363,902,,7,904,,,,,,137,,,,,,,,,907',
',,,,,,,,,,,,,,,7,,,,,,,81,,7,,7,7,7,7,7,7,,,7,,,,,,,744,,,,,81,7,,,',
',,,,,,309,329,,,744,,7,7,,7,7,,,,,,306,,,,,,,,309,5,,,,104,,,7,,130',
',,5,,,130,,,,158,7,,,306,,,,7,,,,,,,,,,,,,,,,7,,,,,,130,,130,5,,,,,7',
',130,,130,,,,,81,7,,,130,81,,,130,,,,,,130,,,,,,7,,,,,,,,158,130,,,',
',,130,,81,,,,,,,,,81,,19,,7,,108,81,,,130,,,,19,,,,,,,159,7,,,5,482',
',,,,,,,,309,,,,,413,130,7,,,,,,,5,158,413,,,19,,,,,,,7,,,,7,,,,,,7,7',
',94,,,,,,,7,,,,,94,,,,,,,,,,159,,,,,,,,,,,,,,,,,,,,,7,,,,,,,,,94,,,',
',7,,,,,,,,19,,,,,81,7,,130,130,,,5,,448,414,,5,,,,,,,19,159,414,,,,',
',,,,81,,,7,,645,,,,,,,,,5,,,,81,,,,,5,,130,130,130,130,130,5,,,130,',
'649,,94,81,,7,,,,7,,130,7,,,,,,659,,,,81,,,,94,130,130,,130,130,,7,7',
',,,671,,,,,,,,118,,,,,,7,130,,,19,680,414,,,19,,,7,7,130,,,,,,,130,',
',,,,,,,,,,7,7,,,130,,7,81,19,,,,,,,,,19,130,,,81,,,19,,,,130,,,,,,,',
',,,,7,,448,94,,,,5,94,,,,7,,,,,7,,,,,,,,,,,7,,,7,,,,,,5,,,94,,,7,,7',
',,,94,,,,,81,5,94,81,,,,,,,7,,,,,,,,,,,5,,,,81,,,,,,,397,,,782,,,784',
',5,,,81,130,,,406,,,130,130,,,,81,,,,,130,,414,,104,,,19,,,,,,,,,81',
'81,813,,38,,81,,111,,,,,,820,,38,,,,130,19,,161,,,,,195,,,,,,5,830,831',
',,19,81,833,857,,,,,,5,,,,81,,,,38,81,,19,,,,94,,,,,81,,,81,,,,852,',
',19,681,130,,,81,,81,,862,,,,,866,94,,,,,161,,,,108,,,,,,,,,94,,,,,',
'130,881,,882,5,,,5,,,,,,,94,,,,,,,,,,38,,,,130,5,,19,,94,,,,,,195,,',
'518,,,19,,5,38,161,195,,,,,,,,535,5,130,,,,,,,,,,,,,,,,,,,,5,5,,,,,5',
',,,,,,,,,,571,,,,,,94,,,,583,,,,586,,,,591,,94,19,,5,19,853,,,,,,,,',
',5,,,,,5,,,,,,19,,,,,5,,38,5,195,,,38,,,,,,19,,5,,5,,,,,,,,19,,,,,,',
',,,,130,,,38,,,94,,,94,19,19,38,,,,19,,,38,,,,,,,,,,,,94,,,,,,665,,',
'591,,,,,,670,,,94,19,,854,665,,,,,,,,94,19,,,,,19,,,,,,,,,,,19,,,19',
'94,94,,,,,94,,,,,19,,19,,,706,,,,,,,,,,,,,713,,,,,,716,,,,,94,,,,,,',
',,,,,94,,,,,94,,,,,,,,,,,94,195,,94,,,38,,,,,,,747,,94,,94,,,,,,,,,',
',,,,,586,,,,38,,,,,,,768,,,,518,,,,,,,38,,,,,,,,,,,,,,,,,,,,38,,,,,',
',591,,,,,,,591,,,,,38,,,,,,,,,,,,,,806,,,,,,,,,,111,,,,,,,,,,,,,,,,',
',,,,,,,,,826,,,,829,,,,,,,,,,,,,,,838,38,,841,,,,,,,,,,,,38,,,,,,,,',
',,,,,,,,,,,,,,,,665,,,,,,,,586,,,591,,,,,,,,,,,,,,,,,,,,,,,,886,,,,',
'888,,,891,,,,,38,,,38,,,,,,,,,,591,,,,,,,,,,,,38,,906,,,,,,,,,,,,,,',
',38,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,38,38,,,,,38,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,38,,855,,,,,,,,,,38,,,,,38,,,,,,,,,,,38,,,38,,,,,,,',
',,,,38,,38' ]
racc_goto_table = arr = Array.new(2423, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

clist = [
'28,51,82,51,29,13,28,13,21,28,29,18,81,48,28,3,5,140,85,28,61,53,32',
'33,33,35,61,58,128,78,84,49,54,57,49,21,49,9,40,57,28,23,31,41,29,46',
'78,54,31,34,28,11,139,142,139,138,139,23,138,79,61,36,36,146,59,28,44',
'59,17,29,84,48,6,57,80,47,28,9,80,105,125,74,31,58,75,10,47,58,76,49',
'65,10,28,6,53,63,29,10,34,62,52,43,34,83,38,56,49,56,37,57,86,87,88',
'28,89,90,91,29,92,56,28,56,54,93,94,95,96,97,98,99,28,100,101,61,44',
'28,102,103,104,66,107,108,60,111,28,55,57,40,112,113,114,55,41,115,116',
'31,117,10,118,36,125,119,17,123,124,10,142,27,10,125,10,138,146,126',
'10,127,26,15,129,130,54,131,132,134,10,55,135,15,137,14,54,54,12,7,141',
'4,145,1,,,,,,81,,,15,,,,,,,,140,,,,,,,55,,,,,46,,,,,,,,80,,,139,139',
'36,,,,139,48,,,33,33,128,,,,,,,,,55,,,,49,,,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,128,79,54,,40',
'6,33,,,41,,28,,,25,29,11,21,,28,139,53,,29,25,33,33,,59,59,28,61,28',
'25,84,,,21,58,61,,9,,25,57,,,,28,,17,28,57,31,33,23,33,,25,,,31,,,11',
',17,21,32,17,,3,146,,28,,,,29,146,,,,,,3,,28,49,,,,140,85,28,,28,28',
'29,28,,28,,28,,28,,61,49,,60,10,,34,84,,,,51,34,57,,13,,28,,,,29,,,',
',,57,,49,,49,,,,28,28,,,,15,15,15,15,49,28,,,,55,35,10,,5,35,,,55,,10',
',,,,,,,,10,10,55,,,,,,3,15,54,10,15,,,,53,53,55,,,,,,53,,,78,,146,53',
',,,,,28,,,28,,10,,,,28,,25,25,,,,28,33,,,58,,,84,,,,84,21,,,,,28,28',
',,81,78,28,28,78,,146,34,,,34,,,,17,,,,,,17,17,,82,28,10,,25,25,25,25',
'60,18,,,,,28,33,33,,,,28,60,,10,,28,10,,84,29,54,3,,,3,,,,48,49,,25',
'84,,25,51,,,,13,,,,53,,39,49,,,,,,,,39,,28,39,,,39,,,28,,,,10,49,25',
',,10,,49,28,,,,29,,,,28,,28,28,,,,28,,25,,39,,39,39,,,,,,,39,,39,10',
'57,,,,28,84,15,39,25,,,39,,28,,,28,39,28,28,28,60,17,28,,84,,,60,,,60',
'39,61,,,,,39,10,10,53,28,,,,57,,,,10,,,,,,,,,39,10,,,,,53,,,53,,,,,',
'39,,,,28,,,,28,,,,,,,,39,,,55,,,,28,39,,28,28,60,28,60,,84,16,,,,16',
',,,,,,,16,33,,,,,,,55,,,,21,,,25,,,28,,,,,2,,10,28,10,,28,,,,,60,,,60',
'60,55,16,10,10,,54,,,,15,,,,,28,,,,,28,57,,28,,,,60,,,,28,,,,29,,2,',
'39,39,28,15,39,,49,60,,39,60,,,,,,28,,,,,,,,,60,,,,,,,,,,,,,,,,39,,',
',,,,16,,39,,39,39,39,39,39,39,,,39,,,,,,,10,,,,,16,39,,,,,,,,,,2,10',
',,10,,39,39,,39,39,,,,,,25,,,,,,,,2,20,,,,20,,,39,,20,,,20,,,20,,,,20',
'39,,,25,,,,39,,,,,,,,,,,,,,,,39,,,,,,20,,20,20,,,,,39,,20,,20,,,,,16',
'39,,,20,16,,,20,,,,,,20,,,,,,39,,,,,,,,20,20,,,,,,20,,16,,,,,,,,,16',
',22,,39,,22,16,,,20,,,,22,,,,,,,22,39,,,20,2,,,,,,,,,2,,,,,20,20,39',
',,,,,,20,20,20,,,22,,,,,,,39,,,,39,,,,,,39,39,,19,,,,,,,39,,,,,19,,',
',,,,,,,22,,,,,,,,,,,,,,,,,,,,,39,,,,,,,,,19,,,,,39,,,,,,,,22,,,,,16',
'39,,20,20,,,20,,20,22,,20,,,,,,,22,22,22,,,,,,,,,16,,,39,,2,,,,,,,,',
'20,,,,16,,,,,20,,20,20,20,20,20,20,,,20,,2,,19,16,,39,,,,39,,20,39,',
',,,,2,,,,16,,,,19,20,20,,20,20,,39,39,,,,2,,,,,,,,16,,,,,,39,20,,,22',
'2,22,,,22,,,39,39,20,,,,,,,20,,,,,,,,,,,,39,39,,,20,,39,16,22,,,,,,',
',,22,20,,,16,,,22,,,,20,,,,,,,,,,,,39,,20,19,,,,20,19,,,,39,,,,,39,',
',,,,,,,,,39,,,39,,,,,,20,,,19,,,39,,39,,,,19,,,,,16,20,19,16,,,,,,,39',
',,,,,,,,,,20,,,,16,,,,,,,24,,,2,,,2,,20,,,16,20,,,24,,,20,20,,,,16,',
',,,20,,22,,20,,,22,,,,,,,,,16,16,2,,45,,16,,45,,,,,,2,,45,,,,20,22,',
'45,,,,,45,,,,,,20,2,2,,,22,16,2,16,,,,,,20,,,,16,,,,45,16,,22,,,,19',
',,,,16,,,16,,,,2,,,22,22,20,,,16,,16,,2,,,,,2,19,,,,,45,,,,22,,,,,,',
',,19,,,,,,20,2,,2,20,,,20,,,,,,,19,,,,,,,,,,45,,,,20,20,,22,,19,,,,',
',45,,,24,,,22,,20,45,45,45,,,,,,,,24,20,20,,,,,,,,,,,,,,,,,,,,20,20',
',,,,20,,,,,,,,,,,24,,,,,,19,,,,24,,,,24,,,,24,,19,22,,20,22,20,,,,,',
',,,,20,,,,,20,,,,,,22,,,,,20,,45,20,45,,,45,,,,,,22,,20,,20,,,,,,,,22',
',,,,,,,,,,20,,,45,,,19,,,19,22,22,45,,,,22,,,45,,,,,,,,,,,,19,,,,,,24',
',,24,,,,,,24,,,19,22,,22,24,,,,,,,,19,22,,,,,22,,,,,,,,,,,22,,,22,19',
'19,,,,,19,,,,,22,,22,,,24,,,,,,,,,,,,,24,,,,,,24,,,,,19,,,,,,,,,,,,19',
',,,,19,,,,,,,,,,,19,45,,19,,,45,,,,,,,24,,19,,19,,,,,,,,,,,,,,,24,,',
',45,,,,,,,24,,,,24,,,,,,,45,,,,,,,,,,,,,,,,,,,,45,,,,,,,24,,,,,,,24',
',,,,45,,,,,,,,,,,,,,24,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,24',
',,,,,,,,,,,,,,24,45,,24,,,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,24,,,',
',,,,24,,,24,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,24,,,24,,,,,45,,,45,,,,,,',
',,,24,,,,,,,,,,,,45,,24,,,,,,,,,,,,,,,,45,,,,,,,,,,,,45,,,,,,,,,,,,',
',,,,,,,,45,45,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,45,,45,,,,,,,',
',,45,,,,,45,,,,,,,,,,,45,,,45,,,,,,,,,,,,45,,45' ]
racc_goto_check = arr = Array.new(2423, nil)
str = a = i = nil
idx = 0
clist.each do |str|
  str.split(',', -1).each do |i|
    arr[idx] = i.to_i unless i.empty?
    idx += 1
  end
end

racc_goto_pointer = [
   nil,   197,   820,  -250,   195,  -430,  -566,  -550,   nil,    -5,
    81,    37,   150,   -24,   158,   124,   785,     7,     5,  1168,
   982,   -68,  1096,  -293,  1385,   252,   -75,   123,   -11,    -7,
   nil,    31,  -299,   -78,    42,   -96,  -324,  -276,  -594,   615,
   -16,   -11,   nil,    80,   -30,  1562,  -370,   -79,   -13,     5,
   nil,   -28,  -341,   -18,    26,   134,  -226,    22,   -33,  -440,
    -5,     9,  -290,   -29,   nil,  -299,  -431,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    55,    -3,    80,   nil,  -278,  -590,
  -463,  -323,    -4,  -314,   -12,  -417,    84,   -97,    75,  -213,
    24,  -560,    23,  -556,  -253,  -655,   108,  -477,   -25,  -466,
  -665,   110,  -295,   -72,  -296,  -648,   nil,  -163,  -507,   nil,
   nil,    20,  -420,    27,  -414,  -520,  -708,  -369,  -481,  -584,
   nil,   nil,   nil,   122,    75,    76,   163,    48,   -99,   162,
  -364,  -180,  -177,   nil,  -420,  -446,   nil,  -543,  -676,  -565,
  -418,  -537,  -681,   nil,   nil,   -24,  -344 ]

racc_goto_default = [
   nil,   nil,   446,   nil,   nil,   nil,   757,   nil,    42,   nil,
    49,    58,   336,   nil,   nil,   nil,   143,    86,    90,   145,
   156,   nil,   132,   nil,   134,    32,   nil,   nil,    46,    50,
    55,   nil,    66,   555,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    21,    24,    33,   135,   416,   nil,   245,   369,
   222,    65,   nil,   nil,    79,   331,   nil,   333,   549,   550,
   404,   585,   nil,   nil,   124,   nil,   nil,   402,    57,    62,
    68,    71,    75,    80,    85,   nil,   125,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   487,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   304,   nil,   nil,   367,
   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    28,    35,    41,    45,   nil,   nil,   nil,   nil,   360,   nil,
   nil,   nil,   nil,   343,   nil,   616,   617,   619,   621,   nil,
   804,   628,   630,   614,   615,   nil,   142 ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :kCLASS => 2,
 :kMODULE => 3,
 :kDEF => 4,
 :kUNDEF => 5,
 :kBEGIN => 6,
 :kRESCUE => 7,
 :kENSURE => 8,
 :kEND => 9,
 :kIF => 10,
 :kUNLESS => 11,
 :kTHEN => 12,
 :kELSIF => 13,
 :kELSE => 14,
 :kCASE => 15,
 :kWHEN => 16,
 :kWHILE => 17,
 :kUNTIL => 18,
 :kFOR => 19,
 :kBREAK => 20,
 :kNEXT => 21,
 :kREDO => 22,
 :kRETRY => 23,
 :kIN => 24,
 :kDO => 25,
 :kDO_COND => 26,
 :kDO_BLOCK => 27,
 :kRETURN => 28,
 :kYIELD => 29,
 :kSUPER => 30,
 :kSELF => 31,
 :kNIL => 32,
 :kTRUE => 33,
 :kFALSE => 34,
 :kAND => 35,
 :kOR => 36,
 :kNOT => 37,
 :kIF_MOD => 38,
 :kUNLESS_MOD => 39,
 :kWHILE_MOD => 40,
 :kUNTIL_MOD => 41,
 :kRESCUE_MOD => 42,
 :kALIAS => 43,
 :kDEFINED => 44,
 :klBEGIN => 45,
 :klEND => 46,
 :k__LINE__ => 47,
 :k__FILE__ => 48,
 :tIDENTIFIER => 49,
 :tFID => 50,
 :tGVAR => 51,
 :tIVAR => 52,
 :tCONSTANT => 53,
 :tCVAR => 54,
 :tNTH_REF => 55,
 :tBACK_REF => 56,
 :tSTRING_CONTENT => 57,
 :tINTEGER => 58,
 :tFLOAT => 59,
 :tREGEXP_END => 60,
 :tUPLUS => 61,
 :tUMINUS => 62,
 :tUMINUS_NUM => 63,
 :tPOW => 64,
 :tCMP => 65,
 :tEQ => 66,
 :tEQQ => 67,
 :tNEQ => 68,
 :tGEQ => 69,
 :tLEQ => 70,
 :tANDOP => 71,
 :tOROP => 72,
 :tMATCH => 73,
 :tNMATCH => 74,
 :tDOT => 75,
 :tDOT2 => 76,
 :tDOT3 => 77,
 :tAREF => 78,
 :tASET => 79,
 :tLSHFT => 80,
 :tRSHFT => 81,
 :tCOLON2 => 82,
 :tCOLON3 => 83,
 :tOP_ASGN => 84,
 :tASSOC => 85,
 :tLPAREN => 86,
 :tLPAREN2 => 87,
 :tRPAREN => 88,
 :tLPAREN_ARG => 89,
 :tLBRACK => 90,
 :tRBRACK => 91,
 :tLBRACE => 92,
 :tLBRACE_ARG => 93,
 :tSTAR => 94,
 :tSTAR2 => 95,
 :tAMPER => 96,
 :tAMPER2 => 97,
 :tTILDE => 98,
 :tPERCENT => 99,
 :tDIVIDE => 100,
 :tPLUS => 101,
 :tMINUS => 102,
 :tLT => 103,
 :tGT => 104,
 :tPIPE => 105,
 :tBANG => 106,
 :tCARET => 107,
 :tLCURLY => 108,
 :tRCURLY => 109,
 :tBACK_REF2 => 110,
 :tSYMBEG => 111,
 :tSTRING_BEG => 112,
 :tXSTRING_BEG => 113,
 :tREGEXP_BEG => 114,
 :tWORDS_BEG => 115,
 :tAWORDS_BEG => 116,
 :tSTRING_DBEG => 117,
 :tSTRING_DVAR => 118,
 :tSTRING_END => 119,
 :tSTRING => 120,
 :tSYMBOL => 121,
 :tNL => 122,
 :tEH => 123,
 :tCOLON => 124,
 :tCOMMA => 125,
 :tSPACE => 126,
 :tSEMI => 127,
 :tLAST_TOKEN => 128,
 :tEQL => 129,
 :tLOWEST => 130,
 "[" => 131 }

racc_use_result_var = true

racc_nt_base = 132

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'kCLASS',
'kMODULE',
'kDEF',
'kUNDEF',
'kBEGIN',
'kRESCUE',
'kENSURE',
'kEND',
'kIF',
'kUNLESS',
'kTHEN',
'kELSIF',
'kELSE',
'kCASE',
'kWHEN',
'kWHILE',
'kUNTIL',
'kFOR',
'kBREAK',
'kNEXT',
'kREDO',
'kRETRY',
'kIN',
'kDO',
'kDO_COND',
'kDO_BLOCK',
'kRETURN',
'kYIELD',
'kSUPER',
'kSELF',
'kNIL',
'kTRUE',
'kFALSE',
'kAND',
'kOR',
'kNOT',
'kIF_MOD',
'kUNLESS_MOD',
'kWHILE_MOD',
'kUNTIL_MOD',
'kRESCUE_MOD',
'kALIAS',
'kDEFINED',
'klBEGIN',
'klEND',
'k__LINE__',
'k__FILE__',
'tIDENTIFIER',
'tFID',
'tGVAR',
'tIVAR',
'tCONSTANT',
'tCVAR',
'tNTH_REF',
'tBACK_REF',
'tSTRING_CONTENT',
'tINTEGER',
'tFLOAT',
'tREGEXP_END',
'tUPLUS',
'tUMINUS',
'tUMINUS_NUM',
'tPOW',
'tCMP',
'tEQ',
'tEQQ',
'tNEQ',
'tGEQ',
'tLEQ',
'tANDOP',
'tOROP',
'tMATCH',
'tNMATCH',
'tDOT',
'tDOT2',
'tDOT3',
'tAREF',
'tASET',
'tLSHFT',
'tRSHFT',
'tCOLON2',
'tCOLON3',
'tOP_ASGN',
'tASSOC',
'tLPAREN',
'tLPAREN2',
'tRPAREN',
'tLPAREN_ARG',
'tLBRACK',
'tRBRACK',
'tLBRACE',
'tLBRACE_ARG',
'tSTAR',
'tSTAR2',
'tAMPER',
'tAMPER2',
'tTILDE',
'tPERCENT',
'tDIVIDE',
'tPLUS',
'tMINUS',
'tLT',
'tGT',
'tPIPE',
'tBANG',
'tCARET',
'tLCURLY',
'tRCURLY',
'tBACK_REF2',
'tSYMBEG',
'tSTRING_BEG',
'tXSTRING_BEG',
'tREGEXP_BEG',
'tWORDS_BEG',
'tAWORDS_BEG',
'tSTRING_DBEG',
'tSTRING_DVAR',
'tSTRING_END',
'tSTRING',
'tSYMBOL',
'tNL',
'tEH',
'tCOLON',
'tCOMMA',
'tSPACE',
'tSEMI',
'tLAST_TOKEN',
'tEQL',
'tLOWEST',
'"["',
'$start',
'program',
'compstmt',
'bodystmt',
'@1',
'opt_rescue',
'opt_else',
'opt_ensure',
'stmts',
'opt_terms',
'none',
'stmt',
'terms',
'fitem',
'undef_list',
'expr_value',
'lhs',
'command_call',
'mlhs',
'var_lhs',
'primary_value',
'aref_args',
'backref',
'mrhs',
'arg_value',
'expr',
'@2',
'@3',
'arg',
'command',
'block_command',
'call_args',
'block_call',
'operation2',
'command_args',
'cmd_brace_block',
'opt_block_var',
'@4',
'@5',
'operation',
'mlhs_basic',
'mlhs_entry',
'mlhs_head',
'mlhs_item',
'mlhs_node',
'variable',
'cname',
'cpath',
'fname',
'op',
'reswords',
'symbol',
'@6',
'opt_nl',
'primary',
'args',
'trailer',
'assocs',
'paren_args',
'opt_paren_args',
'opt_block_arg',
'block_arg',
'call_args2',
'open_args',
'@7',
'@8',
'@9',
'none_block_pass',
'literal',
'strings',
'xstring',
'regexp',
'words',
'awords',
'var_ref',
'assoc_list',
'brace_block',
'method_call',
'then',
'if_tail',
'do',
'case_body',
'block_var',
'superclass',
'term',
'f_arglist',
'singleton',
'dot_or_colon',
'@10',
'@11',
'@12',
'@13',
'@14',
'@15',
'@16',
'@17',
'@18',
'@19',
'@20',
'@21',
'@22',
'@23',
'@24',
'@25',
'@26',
'@27',
'do_block',
'@28',
'@29',
'operation3',
'@30',
'@31',
'@32',
'@33',
'@34',
'when_args',
'cases',
'@35',
'exc_list',
'exc_var',
'numeric',
'dsym',
'string',
'string1',
'string_contents',
'xstring_contents',
'word_list',
'word',
'string_content',
'qword_list',
'string_dvar',
'@36',
'@37',
'sym',
'@38',
'f_args',
'f_arg',
'f_optarg',
'f_rest_arg',
'opt_f_block_arg',
'f_block_arg',
'f_norm_arg',
'f_opt',
'restarg_mark',
'blkarg_mark',
'@39',
'assoc']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

module_eval <<'.,.,', 'ruby_parser.y', 50
  def _reduce_1( val, _values, result )
                      self.lexer.lex_state = :expr_beg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 54
  def _reduce_2( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 59
  def _reduce_3( val, _values, result )
                      result = new_body val
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 64
  def _reduce_4( val, _values, result )
                      result = new_compstmt val
   result
  end
.,.,

 # reduce 5 omitted

 # reduce 6 omitted

module_eval <<'.,.,', 'ruby_parser.y', 71
  def _reduce_7( val, _values, result )
                      result = self.block_append val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 75
  def _reduce_8( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 81
  def _reduce_9( val, _values, result )
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 85
  def _reduce_10( val, _values, result )
                      result = s(:alias, val[1], val[3]).line(val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 89
  def _reduce_11( val, _values, result )
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 93
  def _reduce_12( val, _values, result )
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 97
  def _reduce_13( val, _values, result )
                      yyerror "can't make alias for the number variables"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 101
  def _reduce_14( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 105
  def _reduce_15( val, _values, result )
                      result = new_if val[2], val[0], nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 109
  def _reduce_16( val, _values, result )
                      result = new_if val[2], nil, val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 113
  def _reduce_17( val, _values, result )
                      result = new_while val[0], val[2], true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 117
  def _reduce_18( val, _values, result )
                      result = new_until val[0], val[2], true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 121
  def _reduce_19( val, _values, result )
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 128
  def _reduce_20( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "BEGIN in method"
                      end
                      self.env.extend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 133
  def _reduce_21( val, _values, result )
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 140
  def _reduce_22( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "END in method; use at_exit"
                      end
                      result = new_iter s(:postexe), nil, val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 144
  def _reduce_23( val, _values, result )
                      result = self.node_assign val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 148
  def _reduce_24( val, _values, result )
                      result = new_masgn val[0], val[2], :wrap
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 152
  def _reduce_25( val, _values, result )
                      result = new_op_asgn val
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 156
  def _reduce_26( val, _values, result )
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 160
  def _reduce_27( val, _values, result )
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 164
  def _reduce_28( val, _values, result )
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 168
  def _reduce_29( val, _values, result )
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 172
  def _reduce_30( val, _values, result )
                      self.backref_assign_error val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 176
  def _reduce_31( val, _values, result )
                      result = self.node_assign val[0], s(:svalue, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 180
  def _reduce_32( val, _values, result )
                      result = new_masgn val[0], val[2], :wrap
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 184
  def _reduce_33( val, _values, result )
                      result = new_masgn val[0], val[2]
   result
  end
.,.,

 # reduce 34 omitted

 # reduce 35 omitted

module_eval <<'.,.,', 'ruby_parser.y', 191
  def _reduce_36( val, _values, result )
                      result = logop(:and, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 195
  def _reduce_37( val, _values, result )
                      result = logop(:or, val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 199
  def _reduce_38( val, _values, result )
                      result = s(:not, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 203
  def _reduce_39( val, _values, result )
                      result = s(:not, val[1])
   result
  end
.,.,

 # reduce 40 omitted

module_eval <<'.,.,', 'ruby_parser.y', 209
  def _reduce_41( val, _values, result )
                      result = value_expr(val[0])
   result
  end
.,.,

 # reduce 42 omitted

 # reduce 43 omitted

module_eval <<'.,.,', 'ruby_parser.y', 216
  def _reduce_44( val, _values, result )
                      result = s(:return, ret_args(val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 220
  def _reduce_45( val, _values, result )
                      result = s(:break, ret_args(val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 224
  def _reduce_46( val, _values, result )
                      result = s(:next, ret_args(val[1]))
   result
  end
.,.,

 # reduce 47 omitted

module_eval <<'.,.,', 'ruby_parser.y', 230
  def _reduce_48( val, _values, result )
                      result = new_call val[0], val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 234
  def _reduce_49( val, _values, result )
                      result = new_call val[0], val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 240
  def _reduce_50( val, _values, result )
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 244
  def _reduce_51( val, _values, result )
                      result = self.env.dynamic.keys
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 249
  def _reduce_52( val, _values, result )
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 254
  def _reduce_53( val, _values, result )
                      result = new_call nil, val[0].to_sym, val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 265
  def _reduce_54( val, _values, result )
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 269
  def _reduce_55( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 273
  def _reduce_56( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 277
  def _reduce_57( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 288
  def _reduce_58( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 292
  def _reduce_59( val, _values, result )
                      result = new_super val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 296
  def _reduce_60( val, _values, result )
                      result = new_yield val[1]
   result
  end
.,.,

 # reduce 61 omitted

module_eval <<'.,.,', 'ruby_parser.y', 302
  def _reduce_62( val, _values, result )
                      result = val[1]
   result
  end
.,.,

 # reduce 63 omitted

module_eval <<'.,.,', 'ruby_parser.y', 308
  def _reduce_64( val, _values, result )
                      result = s(:masgn, s(:array, val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 313
  def _reduce_65( val, _values, result )
                      result = s(:masgn, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 317
  def _reduce_66( val, _values, result )
                      result = s(:masgn, val[0] << val[1].compact)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 321
  def _reduce_67( val, _values, result )
                      result = s(:masgn, val[0] << s(:splat, val[2]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 325
  def _reduce_68( val, _values, result )
                      result = s(:masgn, val[0] << s(:splat))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 329
  def _reduce_69( val, _values, result )
                      result = s(:masgn, s(:array, s(:splat, val[1])))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 333
  def _reduce_70( val, _values, result )
                      result = s(:masgn, s(:array, s(:splat)))
   result
  end
.,.,

 # reduce 71 omitted

module_eval <<'.,.,', 'ruby_parser.y', 339
  def _reduce_72( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 344
  def _reduce_73( val, _values, result )
                      result = s(:array, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 348
  def _reduce_74( val, _values, result )
                      result = val[0] << val[1].compact
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 353
  def _reduce_75( val, _values, result )
                      result = self.assignable val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 357
  def _reduce_76( val, _values, result )
                      result = self.aryset val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 361
  def _reduce_77( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 365
  def _reduce_78( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 369
  def _reduce_79( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 377
  def _reduce_80( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 385
  def _reduce_81( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 389
  def _reduce_82( val, _values, result )
                      self.backref_assign_error val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 394
  def _reduce_83( val, _values, result )
                      result = self.assignable val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 398
  def _reduce_84( val, _values, result )
                      result = self.aryset val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 402
  def _reduce_85( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 406
  def _reduce_86( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 410
  def _reduce_87( val, _values, result )
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 418
  def _reduce_88( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 426
  def _reduce_89( val, _values, result )
                      if (self.in_def || self.in_single > 0) then
                        yyerror "dynamic constant assignment"
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 430
  def _reduce_90( val, _values, result )
                      self.backref_assign_error val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 435
  def _reduce_91( val, _values, result )
                      yyerror "class/module name must be CONSTANT"
   result
  end
.,.,

 # reduce 92 omitted

module_eval <<'.,.,', 'ruby_parser.y', 441
  def _reduce_93( val, _values, result )
                      result = s(:colon3, val[1].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 445
  def _reduce_94( val, _values, result )
                      result = val[0].to_sym
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 449
  def _reduce_95( val, _values, result )
                      result = s(:colon2, val[0], val[2].to_sym)
   result
  end
.,.,

 # reduce 96 omitted

 # reduce 97 omitted

 # reduce 98 omitted

module_eval <<'.,.,', 'ruby_parser.y', 456
  def _reduce_99( val, _values, result )
                      lexer.lex_state = :expr_end
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 462
  def _reduce_100( val, _values, result )
                      lexer.lex_state = :expr_end
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 464
  def _reduce_101( val, _values, result )
 result = s(:lit, val[0].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 465
  def _reduce_102( val, _values, result )
 result = s(:lit, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 471
  def _reduce_103( val, _values, result )
                      result = new_undef val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 476
  def _reduce_104( val, _values, result )
                      lexer.lex_state = :expr_fname
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 480
  def _reduce_105( val, _values, result )
                      result = new_undef val[0], val[3]
   result
  end
.,.,

 # reduce 106 omitted

 # reduce 107 omitted

 # reduce 108 omitted

 # reduce 109 omitted

 # reduce 110 omitted

 # reduce 111 omitted

 # reduce 112 omitted

 # reduce 113 omitted

 # reduce 114 omitted

 # reduce 115 omitted

 # reduce 116 omitted

 # reduce 117 omitted

 # reduce 118 omitted

 # reduce 119 omitted

 # reduce 120 omitted

 # reduce 121 omitted

 # reduce 122 omitted

 # reduce 123 omitted

 # reduce 124 omitted

 # reduce 125 omitted

 # reduce 126 omitted

 # reduce 127 omitted

 # reduce 128 omitted

 # reduce 129 omitted

 # reduce 130 omitted

 # reduce 131 omitted

 # reduce 132 omitted

 # reduce 133 omitted

 # reduce 134 omitted

 # reduce 135 omitted

 # reduce 136 omitted

 # reduce 137 omitted

 # reduce 138 omitted

 # reduce 139 omitted

 # reduce 140 omitted

 # reduce 141 omitted

 # reduce 142 omitted

 # reduce 143 omitted

 # reduce 144 omitted

 # reduce 145 omitted

 # reduce 146 omitted

 # reduce 147 omitted

 # reduce 148 omitted

 # reduce 149 omitted

 # reduce 150 omitted

 # reduce 151 omitted

 # reduce 152 omitted

 # reduce 153 omitted

 # reduce 154 omitted

 # reduce 155 omitted

 # reduce 156 omitted

 # reduce 157 omitted

 # reduce 158 omitted

 # reduce 159 omitted

 # reduce 160 omitted

 # reduce 161 omitted

 # reduce 162 omitted

 # reduce 163 omitted

 # reduce 164 omitted

 # reduce 165 omitted

 # reduce 166 omitted

 # reduce 167 omitted

 # reduce 168 omitted

 # reduce 169 omitted

 # reduce 170 omitted

 # reduce 171 omitted

 # reduce 172 omitted

module_eval <<'.,.,', 'ruby_parser.y', 499
  def _reduce_173( val, _values, result )
                      result = self.node_assign val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 504
  def _reduce_174( val, _values, result )
                      result = self.node_assign val[0], s(:rescue, val[2], s(:resbody, s(:array), val[4]))
                      # result.line = val[0].line
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 508
  def _reduce_175( val, _values, result )
                      result = new_op_asgn val
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 513
  def _reduce_176( val, _values, result )
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                      val[2][0] = :arglist
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 517
  def _reduce_177( val, _values, result )
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 521
  def _reduce_178( val, _values, result )
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 525
  def _reduce_179( val, _values, result )
                      result = s(:op_asgn, val[0], val[4], val[2], val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 530
  def _reduce_180( val, _values, result )
                      yyerror "constant re-assignment"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 534
  def _reduce_181( val, _values, result )
                      yyerror "constant re-assignment"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 538
  def _reduce_182( val, _values, result )
                      self.backref_assign_error val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 547
  def _reduce_183( val, _values, result )
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 556
  def _reduce_184( val, _values, result )
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 560
  def _reduce_185( val, _values, result )
                      result = new_call val[0], :+, s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 564
  def _reduce_186( val, _values, result )
                      result = new_call val[0], :-, s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 568
  def _reduce_187( val, _values, result )
                      result = new_call val[0], :*, s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 572
  def _reduce_188( val, _values, result )
                      result = new_call val[0], :"/", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 576
  def _reduce_189( val, _values, result )
                      result = new_call val[0], :%, s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 580
  def _reduce_190( val, _values, result )
                      result = new_call val[0], :**, s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 584
  def _reduce_191( val, _values, result )
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 588
  def _reduce_192( val, _values, result )
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 596
  def _reduce_193( val, _values, result )
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 600
  def _reduce_194( val, _values, result )
                      result = new_call val[1], :"-@", s(:arglist)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 604
  def _reduce_195( val, _values, result )
                      result = new_call val[0], :"|", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 608
  def _reduce_196( val, _values, result )
                      result = new_call val[0], :"^", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 612
  def _reduce_197( val, _values, result )
                      result = new_call val[0], :"&", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 616
  def _reduce_198( val, _values, result )
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 620
  def _reduce_199( val, _values, result )
                      result = new_call val[0], :">", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 624
  def _reduce_200( val, _values, result )
                      result = new_call val[0], :">=", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 628
  def _reduce_201( val, _values, result )
                      result = new_call val[0], :"<", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 632
  def _reduce_202( val, _values, result )
                      result = new_call val[0], :"<=", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 636
  def _reduce_203( val, _values, result )
                      result = new_call val[0], :"==", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 640
  def _reduce_204( val, _values, result )
                      result = new_call val[0], :"===", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 647
  def _reduce_205( val, _values, result )
                      # val[0] = value_expr val[0] # TODO: port call_op and clean these
                      # val[2] = value_expr val[2]
                      # result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                      result = new_call val[0], :"!=", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 651
  def _reduce_206( val, _values, result )
                      result = self.get_match_node val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 658
  def _reduce_207( val, _values, result )
                      # result = s(:not, self.get_match_node(val[0], val[2]))
                      result = self.get_match_node(val[0], val[2])
                      result[2] = :'!~'
                      result
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 662
  def _reduce_208( val, _values, result )
                      result = s(:not, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 667
  def _reduce_209( val, _values, result )
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 673
  def _reduce_210( val, _values, result )
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 679
  def _reduce_211( val, _values, result )
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 683
  def _reduce_212( val, _values, result )
                      result = logop(:'&&', val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 687
  def _reduce_213( val, _values, result )
                      result = logop(:'||', val[0], val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 691
  def _reduce_214( val, _values, result )
                      result = s(:defined, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 695
  def _reduce_215( val, _values, result )
                      result = s(:if, val[0], val[2], val[4])
   result
  end
.,.,

 # reduce 216 omitted

module_eval <<'.,.,', 'ruby_parser.y', 701
  def _reduce_217( val, _values, result )
                      result = value_expr(val[0])
   result
  end
.,.,

 # reduce 218 omitted

module_eval <<'.,.,', 'ruby_parser.y', 708
  def _reduce_219( val, _values, result )
                      warning 'parenthesize argument(s) for future version'
                      result = s(:array, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 712
  def _reduce_220( val, _values, result )
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 716
  def _reduce_221( val, _values, result )
                      result = self.arg_concat val[0], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 720
  def _reduce_222( val, _values, result )
                      result = s(:array, s(:hash, *val[0].values))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 724
  def _reduce_223( val, _values, result )
                      result = s(:array, s(:splat, val[1]))
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 729
  def _reduce_224( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 733
  def _reduce_225( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 738
  def _reduce_226( val, _values, result )
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 743
  def _reduce_227( val, _values, result )
                      warning "parenthesize argument(s) for future version"
                      result = val[1].add val[3]
   result
  end
.,.,

 # reduce 228 omitted

 # reduce 229 omitted

module_eval <<'.,.,', 'ruby_parser.y', 752
  def _reduce_230( val, _values, result )
                      warning "parenthesize argument(s) for future version"
                      result = s(:array, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 756
  def _reduce_231( val, _values, result )
                      result = self.arg_blk_pass val[0], val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 761
  def _reduce_232( val, _values, result )
                      result = self.arg_concat val[0], val[3]
                      result = self.arg_blk_pass result, val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 766
  def _reduce_233( val, _values, result )
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 771
  def _reduce_234( val, _values, result )
                      result = self.arg_concat s(:array, s(:hash, *val[0].values)), val[3]
                      result = self.arg_blk_pass result, val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 776
  def _reduce_235( val, _values, result )
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass result, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 782
  def _reduce_236( val, _values, result )
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat val[0], val[5]
                      result = self.arg_blk_pass result, val[6]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 786
  def _reduce_237( val, _values, result )
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
   result
  end
.,.,

 # reduce 238 omitted

module_eval <<'.,.,', 'ruby_parser.y', 793
  def _reduce_239( val, _values, result )
                      args = self.list_prepend val[0], val[2]
                      result = self.arg_blk_pass args, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 797
  def _reduce_240( val, _values, result )
                      result = self.arg_blk_pass val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 802
  def _reduce_241( val, _values, result )
                      result = self.arg_concat s(:array, val[0]), val[3]
                      result = self.arg_blk_pass result, val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 807
  def _reduce_242( val, _values, result )
                      result = self.arg_concat s(:array, val[0], s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 812
  def _reduce_243( val, _values, result )
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass result, val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 817
  def _reduce_244( val, _values, result )
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass result, val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 822
  def _reduce_245( val, _values, result )
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass result, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 827
  def _reduce_246( val, _values, result )
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values))
                      result = self.arg_blk_pass result, val[5]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 832
  def _reduce_247( val, _values, result )
                      result = self.arg_concat s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]
                      result = self.arg_blk_pass result, val[6]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 837
  def _reduce_248( val, _values, result )
                      result = self.arg_concat s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]
                      result = self.arg_blk_pass result, val[8]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 841
  def _reduce_249( val, _values, result )
                      result = self.arg_blk_pass s(:splat, val[1]), val[2]
   result
  end
.,.,

 # reduce 250 omitted

module_eval <<'.,.,', 'ruby_parser.y', 847
  def _reduce_251( val, _values, result )
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 852
  def _reduce_252( val, _values, result )
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
   result
  end
.,.,

 # reduce 253 omitted

module_eval <<'.,.,', 'ruby_parser.y', 858
  def _reduce_254( val, _values, result )
                      lexer.lex_state = :expr_endarg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 863
  def _reduce_255( val, _values, result )
                      warning "don't put space before argument parentheses"
                      result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 867
  def _reduce_256( val, _values, result )
                      lexer.lex_state = :expr_endarg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 872
  def _reduce_257( val, _values, result )
                      warning "don't put space before argument parentheses"
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 877
  def _reduce_258( val, _values, result )
                      result = s(:block_pass, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 882
  def _reduce_259( val, _values, result )
                      result = val[1]
   result
  end
.,.,

 # reduce 260 omitted

module_eval <<'.,.,', 'ruby_parser.y', 888
  def _reduce_261( val, _values, result )
                      result = s(:array, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 892
  def _reduce_262( val, _values, result )
                      result = self.list_append val[0], val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 897
  def _reduce_263( val, _values, result )
                      result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 901
  def _reduce_264( val, _values, result )
                      result = self.arg_concat val[0], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 905
  def _reduce_265( val, _values, result )
                      result = s(:splat, val[1])
   result
  end
.,.,

 # reduce 266 omitted

 # reduce 267 omitted

 # reduce 268 omitted

 # reduce 269 omitted

 # reduce 270 omitted

 # reduce 271 omitted

 # reduce 272 omitted

 # reduce 273 omitted

module_eval <<'.,.,', 'ruby_parser.y', 918
  def _reduce_274( val, _values, result )
                      result = new_call nil, val[0].to_sym
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 922
  def _reduce_275( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 932
  def _reduce_276( val, _values, result )
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 936
  def _reduce_277( val, _values, result )
                      lexer.lex_state = :expr_endarg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 941
  def _reduce_278( val, _values, result )
                      warning "(...) interpreted as grouped expression"
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 946
  def _reduce_279( val, _values, result )
                      result = val[1] || s(:nil)
                      result.paren = true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 950
  def _reduce_280( val, _values, result )
                      result = s(:colon2, val[0], val[2].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 954
  def _reduce_281( val, _values, result )
                      result = s(:colon3, val[1].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 958
  def _reduce_282( val, _values, result )
                      result = new_aref val
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 962
  def _reduce_283( val, _values, result )
                      result = val[1] || s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 966
  def _reduce_284( val, _values, result )
                      result = s(:hash, *val[1].values)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 970
  def _reduce_285( val, _values, result )
                      result = s(:return)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 974
  def _reduce_286( val, _values, result )
                      result = new_yield val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 978
  def _reduce_287( val, _values, result )
                      result = new_yield
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 982
  def _reduce_288( val, _values, result )
                      result = new_yield
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 986
  def _reduce_289( val, _values, result )
                      result = s(:defined, val[3])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 994
  def _reduce_290( val, _values, result )
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line ||= iter.line
   result
  end
.,.,

 # reduce 291 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1001
  def _reduce_292( val, _values, result )
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1005
  def _reduce_293( val, _values, result )
                      result = new_if val[1], val[3], val[4]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1009
  def _reduce_294( val, _values, result )
                      result = new_if val[1], val[4], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1013
  def _reduce_295( val, _values, result )
                      lexer.cond.push true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1017
  def _reduce_296( val, _values, result )
                      lexer.cond.pop
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1021
  def _reduce_297( val, _values, result )
                      result = new_while val[5], val[2], true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1025
  def _reduce_298( val, _values, result )
                      lexer.cond.push true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1029
  def _reduce_299( val, _values, result )
                      lexer.cond.pop
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1033
  def _reduce_300( val, _values, result )
                      result = new_until val[5], val[2], true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1037
  def _reduce_301( val, _values, result )
                      result = new_case val[1], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1041
  def _reduce_302( val, _values, result )
                      result = new_case nil, val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1045
  def _reduce_303( val, _values, result )
                      result = new_case nil, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1049
  def _reduce_304( val, _values, result )
                      lexer.cond.push true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1053
  def _reduce_305( val, _values, result )
                      lexer.cond.pop
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1057
  def _reduce_306( val, _values, result )
                      result = new_for val[4], val[1], val[7]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1061
  def _reduce_307( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1069
  def _reduce_308( val, _values, result )
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror "class definition in method body"
                      end
                      self.env.extend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1074
  def _reduce_309( val, _values, result )
                      result = new_class val
                      self.env.unextend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1078
  def _reduce_310( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1083
  def _reduce_311( val, _values, result )
                      result = self.in_def
                      self.in_def = false
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1089
  def _reduce_312( val, _values, result )
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1094
  def _reduce_313( val, _values, result )
                      result = new_sclass val
                      self.env.unextend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1098
  def _reduce_314( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1106
  def _reduce_315( val, _values, result )
                      self.comments.push self.lexer.comments
                      yyerror "module definition in method body" if
                        self.in_def or self.in_single > 0

                      self.env.extend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1111
  def _reduce_316( val, _values, result )
                      result = new_module val
                      self.env.unextend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1118
  def _reduce_317( val, _values, result )
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = lexer.lineno, lexer.src.beginning_of_line?
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1124
  def _reduce_318( val, _values, result )
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1129
  def _reduce_319( val, _values, result )
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1135
  def _reduce_320( val, _values, result )
                      self.in_single += 1
                      self.env.extend
                      lexer.lex_state = :expr_end # force for args
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1142
  def _reduce_321( val, _values, result )
                      result = new_defs val

                      self.env.unextend
                      self.in_single -= 1
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1146
  def _reduce_322( val, _values, result )
                      result = s(:break)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1150
  def _reduce_323( val, _values, result )
                      result = s(:next)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1154
  def _reduce_324( val, _values, result )
                      result = s(:redo)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1158
  def _reduce_325( val, _values, result )
                      result = s(:retry)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1163
  def _reduce_326( val, _values, result )
                      result = value_expr(val[0])
   result
  end
.,.,

 # reduce 327 omitted

 # reduce 328 omitted

 # reduce 329 omitted

 # reduce 330 omitted

 # reduce 331 omitted

 # reduce 332 omitted

 # reduce 333 omitted

 # reduce 334 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1178
  def _reduce_335( val, _values, result )
                      result = s(:if, val[1], val[3], val[4])
   result
  end
.,.,

 # reduce 336 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1184
  def _reduce_337( val, _values, result )
                      result = val[1]
   result
  end
.,.,

 # reduce 338 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1190
  def _reduce_339( val, _values, result )
                      val[0].delete_at 1 if val[0][1].nil? # HACK
   result
  end
.,.,

 # reduce 340 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1196
  def _reduce_341( val, _values, result )
                      result = 0
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1200
  def _reduce_342( val, _values, result )
                      result = 0
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1204
  def _reduce_343( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1209
  def _reduce_344( val, _values, result )
                      self.env.extend :dynamic
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1213
  def _reduce_345( val, _values, result )
                      result = self.env.dynamic.keys
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1221
  def _reduce_346( val, _values, result )
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body

                      self.env.unextend
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1230
  def _reduce_347( val, _values, result )
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1234
  def _reduce_348( val, _values, result )
                      result = new_call val[0], val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1238
  def _reduce_349( val, _values, result )
                      result = new_call val[0], val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1243
  def _reduce_350( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1247
  def _reduce_351( val, _values, result )
                      result = new_call nil, val[0].to_sym, val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1251
  def _reduce_352( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1255
  def _reduce_353( val, _values, result )
                      result = new_call val[0], val[2].to_sym, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1259
  def _reduce_354( val, _values, result )
                      result = new_call val[0], val[2].to_sym
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1263
  def _reduce_355( val, _values, result )
                      result = new_super val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1267
  def _reduce_356( val, _values, result )
                      result = s(:zsuper)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1273
  def _reduce_357( val, _values, result )
                      self.env.extend :dynamic
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1277
  def _reduce_358( val, _values, result )
                      result = self.env.dynamic.keys
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1286
  def _reduce_359( val, _values, result )
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1291
  def _reduce_360( val, _values, result )
                      self.env.extend :dynamic
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1295
  def _reduce_361( val, _values, result )
                      result = self.env.dynamic.keys
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1303
  def _reduce_362( val, _values, result )
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1308
  def _reduce_363( val, _values, result )
                      result = self.lexer.lineno
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1314
  def _reduce_364( val, _values, result )
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
   result
  end
.,.,

 # reduce 365 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1320
  def _reduce_366( val, _values, result )
                      result = self.list_append val[0], s(:when, val[3], nil)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1324
  def _reduce_367( val, _values, result )
                      result = s(:array, s(:when, val[1], nil))
   result
  end
.,.,

 # reduce 368 omitted

 # reduce 369 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1337
  def _reduce_370( val, _values, result )
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1341
  def _reduce_371( val, _values, result )
                      result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1346
  def _reduce_372( val, _values, result )
                      result = s(:array, val[0])
   result
  end
.,.,

 # reduce 373 omitted

 # reduce 374 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1353
  def _reduce_375( val, _values, result )
                      result = val[1]
   result
  end
.,.,

 # reduce 376 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1363
  def _reduce_377( val, _values, result )
                      if (val[1] != nil) then
                        result = val[1]
                      else
                        result = s(:nil)
                      end
   result
  end
.,.,

 # reduce 378 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1365
  def _reduce_379( val, _values, result )
 result = s(:lit, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1366
  def _reduce_380( val, _values, result )
 result = s(:lit, val[0])
   result
  end
.,.,

 # reduce 381 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1374
  def _reduce_382( val, _values, result )
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0]
   result
  end
.,.,

 # reduce 383 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1380
  def _reduce_384( val, _values, result )
                      result = self.literal_concat val[0], val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1385
  def _reduce_385( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1389
  def _reduce_386( val, _values, result )
                      result = s(:str, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1394
  def _reduce_387( val, _values, result )
                      result = new_xstring val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1399
  def _reduce_388( val, _values, result )
                      result = new_regexp val
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1404
  def _reduce_389( val, _values, result )
                      result = s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1408
  def _reduce_390( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1413
  def _reduce_391( val, _values, result )
                      result = s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1418
  def _reduce_392( val, _values, result )
                      word = val[1][0] == :evstr ? s(:dstr, "", val[1]) : val[1]
                      result = val[0] << word
   result
  end
.,.,

 # reduce 393 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1424
  def _reduce_394( val, _values, result )
                      result = self.literal_concat val[0], val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1429
  def _reduce_395( val, _values, result )
                      result = s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1433
  def _reduce_396( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1438
  def _reduce_397( val, _values, result )
                      result = s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1442
  def _reduce_398( val, _values, result )
                      result = val[0] << s(:str, val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1447
  def _reduce_399( val, _values, result )
                      result = s(:str, "")
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1451
  def _reduce_400( val, _values, result )
                      result = literal_concat(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1456
  def _reduce_401( val, _values, result )
                      result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1460
  def _reduce_402( val, _values, result )
                      result = literal_concat(val[0], val[1])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1465
  def _reduce_403( val, _values, result )
                      result = s(:str, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1471
  def _reduce_404( val, _values, result )
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1476
  def _reduce_405( val, _values, result )
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1484
  def _reduce_406( val, _values, result )
                      result = lexer.lex_strterm
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1504
  def _reduce_407( val, _values, result )
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1505
  def _reduce_408( val, _values, result )
 result = s(:gvar, val[0].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1506
  def _reduce_409( val, _values, result )
 result = s(:ivar, val[0].to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1507
  def _reduce_410( val, _values, result )
 result = s(:cvar, val[0].to_sym)
   result
  end
.,.,

 # reduce 411 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1516
  def _reduce_412( val, _values, result )
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1520
  def _reduce_413( val, _values, result )
                      result = val[0].to_sym
   result
  end
.,.,

 # reduce 414 omitted

 # reduce 415 omitted

 # reduce 416 omitted

 # reduce 417 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1540
  def _reduce_418( val, _values, result )
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror "empty symbol literal" if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, "", result)
                      end
   result
  end
.,.,

 # reduce 419 omitted

 # reduce 420 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1547
  def _reduce_421( val, _values, result )
                      result = -val[1] # TODO: pt_testcase
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1551
  def _reduce_422( val, _values, result )
                      result = -val[1] # TODO: pt_testcase
   result
  end
.,.,

 # reduce 423 omitted

 # reduce 424 omitted

 # reduce 425 omitted

 # reduce 426 omitted

 # reduce 427 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1557
  def _reduce_428( val, _values, result )
 result = :nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1558
  def _reduce_429( val, _values, result )
 result = :self
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1559
  def _reduce_430( val, _values, result )
 result = :true
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1560
  def _reduce_431( val, _values, result )
 result = :false
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1561
  def _reduce_432( val, _values, result )
 result = :__FILE__
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1562
  def _reduce_433( val, _values, result )
 result = :__LINE__
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1568
  def _reduce_434( val, _values, result )
                      result = self.gettable val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1573
  def _reduce_435( val, _values, result )
                      result = self.assignable val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1574
  def _reduce_436( val, _values, result )
 result = s(:nth_ref,  val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1575
  def _reduce_437( val, _values, result )
 result = s(:back_ref, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1581
  def _reduce_438( val, _values, result )
                      result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1585
  def _reduce_439( val, _values, result )
                      lexer.lex_state = :expr_beg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1589
  def _reduce_440( val, _values, result )
                      result = val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1594
  def _reduce_441( val, _values, result )
                      yyerrok
                      result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1600
  def _reduce_442( val, _values, result )
                      result = val[1]
                      lexer.lex_state = :expr_beg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1604
  def _reduce_443( val, _values, result )
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1609
  def _reduce_444( val, _values, result )
                      result = args val[0], val[2], val[4], val[5]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1613
  def _reduce_445( val, _values, result )
                      result = args val[0], val[2],    nil, val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1617
  def _reduce_446( val, _values, result )
                      result = args val[0],    nil, val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1621
  def _reduce_447( val, _values, result )
                      result = args val[0],    nil,    nil, val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1625
  def _reduce_448( val, _values, result )
                      result = args    nil, val[0], val[2], val[3]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1629
  def _reduce_449( val, _values, result )
                      result = args    nil, val[0],    nil, val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1633
  def _reduce_450( val, _values, result )
                      result = args    nil,    nil, val[0], val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1637
  def _reduce_451( val, _values, result )
                      result = args    nil,    nil,    nil, val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1641
  def _reduce_452( val, _values, result )
                      result = args    nil,    nil,    nil,    nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1646
  def _reduce_453( val, _values, result )
                      yyerror "formal argument cannot be a constant: #{val[0]}"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1650
  def _reduce_454( val, _values, result )
                      yyerror "formal argument cannot be an instance variable"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1654
  def _reduce_455( val, _values, result )
                      yyerror "formal argument cannot be a class variable"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1661
  def _reduce_456( val, _values, result )
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1667
  def _reduce_457( val, _values, result )
                      result = s(:args)
                      result << val[0].to_sym
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1672
  def _reduce_458( val, _values, result )
                      val[0] << val[2].to_sym
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1678
  def _reduce_459( val, _values, result )
                      result = self.assignable val[0], val[2]
                      # TODO: detect duplicate names
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1683
  def _reduce_460( val, _values, result )
                      result = s(:block, val[0])
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1687
  def _reduce_461( val, _values, result )
                      result = self.append_to_block val[0], val[2]
   result
  end
.,.,

 # reduce 462 omitted

 # reduce 463 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1697
  def _reduce_464( val, _values, result )
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable name
                      result = :"*#{name}"
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1703
  def _reduce_465( val, _values, result )
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
   result
  end
.,.,

 # reduce 466 omitted

 # reduce 467 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1713
  def _reduce_468( val, _values, result )
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1718
  def _reduce_469( val, _values, result )
                      result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1722
  def _reduce_470( val, _values, result )
                      result = nil
   result
  end
.,.,

 # reduce 471 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1728
  def _reduce_472( val, _values, result )
                      lexer.lex_state = :expr_beg
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1734
  def _reduce_473( val, _values, result )
                      result = val[2]
                      yyerror "Can't define single method for literals." if
                        result[0] == :lit
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1739
  def _reduce_474( val, _values, result )
                      result = s(:array)
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1743
  def _reduce_475( val, _values, result )
                      result = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1751
  def _reduce_476( val, _values, result )
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror "Odd number (#{size}) list for Hash. #{val[0].inspect}"
                      end
                      result = val[0]
   result
  end
.,.,

 # reduce 477 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1760
  def _reduce_478( val, _values, result )
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1765
  def _reduce_479( val, _values, result )
                      result = s(:array, val[0], val[2])
   result
  end
.,.,

 # reduce 480 omitted

 # reduce 481 omitted

 # reduce 482 omitted

 # reduce 483 omitted

 # reduce 484 omitted

 # reduce 485 omitted

 # reduce 486 omitted

 # reduce 487 omitted

 # reduce 488 omitted

 # reduce 489 omitted

 # reduce 490 omitted

 # reduce 491 omitted

 # reduce 492 omitted

 # reduce 493 omitted

 # reduce 494 omitted

 # reduce 495 omitted

 # reduce 496 omitted

 # reduce 497 omitted

 # reduce 498 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1774
  def _reduce_499( val, _values, result )
 yyerrok
   result
  end
.,.,

 # reduce 500 omitted

 # reduce 501 omitted

module_eval <<'.,.,', 'ruby_parser.y', 1778
  def _reduce_502( val, _values, result )
 yyerrok
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1780
  def _reduce_503( val, _values, result )
 result = nil
   result
  end
.,.,

module_eval <<'.,.,', 'ruby_parser.y', 1782
  def _reduce_504( val, _values, result )
 result = nil
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class RubyParser
